
LCDdemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006440  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800654c  0800654c  0000754c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006664  08006664  00008194  2**0
                  CONTENTS
  4 .ARM          00000008  08006664  08006664  00007664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800666c  0800666c  00008194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800666c  0800666c  0000766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006670  08006670  00007670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08006674  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001214  20000194  08006808  00008194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013a8  08006808  000083a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f28d  00000000  00000000  000081bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003042  00000000  00000000  0001744a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0001a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aab  00000000  00000000  0001b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016366  00000000  00000000  0001bd73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001170f  00000000  00000000  000320d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f57c  00000000  00000000  000437e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2d64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000394c  00000000  00000000  000b2da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b66f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000194 	.word	0x20000194
 8000128:	00000000 	.word	0x00000000
 800012c:	08006534 	.word	0x08006534

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000198 	.word	0x20000198
 8000148:	08006534 	.word	0x08006534

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HD44780_Init>:
{
0b00000, 0b00000, 0b01010, 0b11111, 0b11111, 0b01110, 0b00100, 0b00000
};

void HD44780_Init(uint8_t rows)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000166:	4a3a      	ldr	r2, [pc, #232]	@ (8000250 <HD44780_Init+0xf4>)
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800016c:	4b39      	ldr	r3, [pc, #228]	@ (8000254 <HD44780_Init+0xf8>)
 800016e:	2208      	movs	r2, #8
 8000170:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000172:	4b39      	ldr	r3, [pc, #228]	@ (8000258 <HD44780_Init+0xfc>)
 8000174:	2200      	movs	r2, #0
 8000176:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000178:	4b35      	ldr	r3, [pc, #212]	@ (8000250 <HD44780_Init+0xf4>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d907      	bls.n	8000190 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000180:	4b35      	ldr	r3, [pc, #212]	@ (8000258 <HD44780_Init+0xfc>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b33      	ldr	r3, [pc, #204]	@ (8000258 <HD44780_Init+0xfc>)
 800018c:	701a      	strb	r2, [r3, #0]
 800018e:	e006      	b.n	800019e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000190:	4b31      	ldr	r3, [pc, #196]	@ (8000258 <HD44780_Init+0xfc>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	f043 0304 	orr.w	r3, r3, #4
 8000198:	b2da      	uxtb	r2, r3
 800019a:	4b2f      	ldr	r3, [pc, #188]	@ (8000258 <HD44780_Init+0xfc>)
 800019c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800019e:	f000 f9a1 	bl	80004e4 <DelayInit>
  HAL_Delay(50);
 80001a2:	2032      	movs	r0, #50	@ 0x32
 80001a4:	f000 fd4a 	bl	8000c3c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80001a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000254 <HD44780_Init+0xf8>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f95f 	bl	8000470 <ExpanderWrite>
  HAL_Delay(1000);
 80001b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001b6:	f000 fd41 	bl	8000c3c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ba:	2030      	movs	r0, #48	@ 0x30
 80001bc:	f000 f947 	bl	800044e <Write4Bits>
  DelayUS(4500);
 80001c0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001c4:	f000 f9b6 	bl	8000534 <DelayUS>

  Write4Bits(0x03 << 4);
 80001c8:	2030      	movs	r0, #48	@ 0x30
 80001ca:	f000 f940 	bl	800044e <Write4Bits>
  DelayUS(4500);
 80001ce:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001d2:	f000 f9af 	bl	8000534 <DelayUS>

  Write4Bits(0x03 << 4);
 80001d6:	2030      	movs	r0, #48	@ 0x30
 80001d8:	f000 f939 	bl	800044e <Write4Bits>
  DelayUS(4500);
 80001dc:	f241 1094 	movw	r0, #4500	@ 0x1194
 80001e0:	f000 f9a8 	bl	8000534 <DelayUS>

  Write4Bits(0x02 << 4);
 80001e4:	2020      	movs	r0, #32
 80001e6:	f000 f932 	bl	800044e <Write4Bits>
  DelayUS(100);
 80001ea:	2064      	movs	r0, #100	@ 0x64
 80001ec:	f000 f9a2 	bl	8000534 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001f0:	4b19      	ldr	r3, [pc, #100]	@ (8000258 <HD44780_Init+0xfc>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	f043 0320 	orr.w	r3, r3, #32
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 f8ea 	bl	80003d4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000200:	4b16      	ldr	r3, [pc, #88]	@ (800025c <HD44780_Init+0x100>)
 8000202:	2204      	movs	r2, #4
 8000204:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000206:	f000 f87b 	bl	8000300 <HD44780_Display>
  HD44780_Clear();
 800020a:	f000 f831 	bl	8000270 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800020e:	4b14      	ldr	r3, [pc, #80]	@ (8000260 <HD44780_Init+0x104>)
 8000210:	2202      	movs	r2, #2
 8000212:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000214:	4b12      	ldr	r3, [pc, #72]	@ (8000260 <HD44780_Init+0x104>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	f043 0304 	orr.w	r3, r3, #4
 800021c:	b2db      	uxtb	r3, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f8d8 	bl	80003d4 <SendCommand>
  DelayUS(4500);
 8000224:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000228:	f000 f984 	bl	8000534 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800022c:	490d      	ldr	r1, [pc, #52]	@ (8000264 <HD44780_Init+0x108>)
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f892 	bl	8000358 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000234:	490c      	ldr	r1, [pc, #48]	@ (8000268 <HD44780_Init+0x10c>)
 8000236:	2001      	movs	r0, #1
 8000238:	f000 f88e 	bl	8000358 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(2, special3);
 800023c:	490b      	ldr	r1, [pc, #44]	@ (800026c <HD44780_Init+0x110>)
 800023e:	2002      	movs	r0, #2
 8000240:	f000 f88a 	bl	8000358 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000244:	f000 f81f 	bl	8000286 <HD44780_Home>
}
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200001b3 	.word	0x200001b3
 8000254:	200001b4 	.word	0x200001b4
 8000258:	200001b0 	.word	0x200001b0
 800025c:	200001b1 	.word	0x200001b1
 8000260:	200001b2 	.word	0x200001b2
 8000264:	20000000 	.word	0x20000000
 8000268:	20000008 	.word	0x20000008
 800026c:	20000010 	.word	0x20000010

08000270 <HD44780_Clear>:

void HD44780_Clear()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000274:	2001      	movs	r0, #1
 8000276:	f000 f8ad 	bl	80003d4 <SendCommand>
  DelayUS(2000);
 800027a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800027e:	f000 f959 	bl	8000534 <DelayUS>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}

08000286 <HD44780_Home>:

void HD44780_Home()
{
 8000286:	b580      	push	{r7, lr}
 8000288:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800028a:	2002      	movs	r0, #2
 800028c:	f000 f8a2 	bl	80003d4 <SendCommand>
  DelayUS(2000);
 8000290:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000294:	f000 f94e 	bl	8000534 <DelayUS>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}

0800029c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b087      	sub	sp, #28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	460a      	mov	r2, r1
 80002a6:	71fb      	strb	r3, [r7, #7]
 80002a8:	4613      	mov	r3, r2
 80002aa:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80002ac:	4b12      	ldr	r3, [pc, #72]	@ (80002f8 <HD44780_SetCursor+0x5c>)
 80002ae:	f107 0408 	add.w	r4, r7, #8
 80002b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002b8:	4b10      	ldr	r3, [pc, #64]	@ (80002fc <HD44780_SetCursor+0x60>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	79ba      	ldrb	r2, [r7, #6]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d303      	bcc.n	80002ca <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <HD44780_SetCursor+0x60>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	3b01      	subs	r3, #1
 80002c8:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002ca:	79bb      	ldrb	r3, [r7, #6]
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	3318      	adds	r3, #24
 80002d0:	443b      	add	r3, r7
 80002d2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	4413      	add	r3, r2
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	b25b      	sxtb	r3, r3
 80002e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002e4:	b25b      	sxtb	r3, r3
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f873 	bl	80003d4 <SendCommand>
}
 80002ee:	bf00      	nop
 80002f0:	371c      	adds	r7, #28
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd90      	pop	{r4, r7, pc}
 80002f6:	bf00      	nop
 80002f8:	0800654c 	.word	0x0800654c
 80002fc:	200001b3 	.word	0x200001b3

08000300 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000304:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <HD44780_Display+0x28>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	f043 0304 	orr.w	r3, r3, #4
 800030c:	b2da      	uxtb	r2, r3
 800030e:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <HD44780_Display+0x28>)
 8000310:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000312:	4b05      	ldr	r3, [pc, #20]	@ (8000328 <HD44780_Display+0x28>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	f043 0308 	orr.w	r3, r3, #8
 800031a:	b2db      	uxtb	r3, r3
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f859 	bl	80003d4 <SendCommand>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	200001b1 	.word	0x200001b1

0800032c <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 8000330:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <HD44780_NoCursor+0x28>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	f023 0302 	bic.w	r3, r3, #2
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <HD44780_NoCursor+0x28>)
 800033c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800033e:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <HD44780_NoCursor+0x28>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	b2db      	uxtb	r3, r3
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f843 	bl	80003d4 <SendCommand>
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200001b1 	.word	0x200001b1

08000358 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	6039      	str	r1, [r7, #0]
 8000362:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	f003 0307 	and.w	r3, r3, #7
 800036a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	b25b      	sxtb	r3, r3
 8000372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000376:	b25b      	sxtb	r3, r3
 8000378:	b2db      	uxtb	r3, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f82a 	bl	80003d4 <SendCommand>
  for (int i=0; i<8; i++)
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	e009      	b.n	800039a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	683a      	ldr	r2, [r7, #0]
 800038a:	4413      	add	r3, r2
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f82e 	bl	80003f0 <SendChar>
  for (int i=0; i<8; i++)
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	3301      	adds	r3, #1
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	2b07      	cmp	r3, #7
 800039e:	ddf2      	ble.n	8000386 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80003b2:	e006      	b.n	80003c2 <HD44780_PrintStr+0x18>
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	607a      	str	r2, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 f817 	bl	80003f0 <SendChar>
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1f4      	bne.n	80003b4 <HD44780_PrintStr+0xa>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f812 	bl	800040c <Send>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	2101      	movs	r1, #1
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 f804 	bl	800040c <Send>
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	460a      	mov	r2, r1
 8000416:	71fb      	strb	r3, [r7, #7]
 8000418:	4613      	mov	r3, r2
 800041a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	f023 030f 	bic.w	r3, r3, #15
 8000422:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	011b      	lsls	r3, r3, #4
 8000428:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800042a:	7bfa      	ldrb	r2, [r7, #15]
 800042c:	79bb      	ldrb	r3, [r7, #6]
 800042e:	4313      	orrs	r3, r2
 8000430:	b2db      	uxtb	r3, r3
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f80b 	bl	800044e <Write4Bits>
  Write4Bits((lownib)|mode);
 8000438:	7bba      	ldrb	r2, [r7, #14]
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	4313      	orrs	r3, r2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f804 	bl	800044e <Write4Bits>
}
 8000446:	bf00      	nop
 8000448:	3710      	adds	r7, #16
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	4603      	mov	r3, r0
 8000456:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f808 	bl	8000470 <ExpanderWrite>
  PulseEnable(value);
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f820 	bl	80004a8 <PulseEnable>
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af02      	add	r7, sp, #8
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800047a:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <ExpanderWrite+0x30>)
 800047c:	781a      	ldrb	r2, [r3, #0]
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	4313      	orrs	r3, r2
 8000482:	b2db      	uxtb	r3, r3
 8000484:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000486:	f107 020f 	add.w	r2, r7, #15
 800048a:	230a      	movs	r3, #10
 800048c:	9300      	str	r3, [sp, #0]
 800048e:	2301      	movs	r3, #1
 8000490:	214e      	movs	r1, #78	@ 0x4e
 8000492:	4804      	ldr	r0, [pc, #16]	@ (80004a4 <ExpanderWrite+0x34>)
 8000494:	f000 ffd4 	bl	8001440 <HAL_I2C_Master_Transmit>
}
 8000498:	bf00      	nop
 800049a:	3710      	adds	r7, #16
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	200001b4 	.word	0x200001b4
 80004a4:	200001b8 	.word	0x200001b8

080004a8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f043 0304 	orr.w	r3, r3, #4
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ffd8 	bl	8000470 <ExpanderWrite>
  DelayUS(20);
 80004c0:	2014      	movs	r0, #20
 80004c2:	f000 f837 	bl	8000534 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	f023 0304 	bic.w	r3, r3, #4
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ffce 	bl	8000470 <ExpanderWrite>
  DelayUS(20);
 80004d4:	2014      	movs	r0, #20
 80004d6:	f000 f82d 	bl	8000534 <DelayUS>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <DelayInit>:

static void DelayInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004e8:	4b10      	ldr	r3, [pc, #64]	@ (800052c <DelayInit+0x48>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a0f      	ldr	r2, [pc, #60]	@ (800052c <DelayInit+0x48>)
 80004ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004f2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <DelayInit+0x48>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	4a0c      	ldr	r2, [pc, #48]	@ (800052c <DelayInit+0x48>)
 80004fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004fe:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000500:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <DelayInit+0x4c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <DelayInit+0x4c>)
 8000506:	f023 0301 	bic.w	r3, r3, #1
 800050a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800050c:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <DelayInit+0x4c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	@ (8000530 <DelayInit+0x4c>)
 8000512:	f043 0301 	orr.w	r3, r3, #1
 8000516:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000518:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <DelayInit+0x4c>)
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800051e:	bf00      	nop
  __ASM volatile ("NOP");
 8000520:	bf00      	nop
  __ASM volatile ("NOP");
 8000522:	bf00      	nop
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	e000edf0 	.word	0xe000edf0
 8000530:	e0001000 	.word	0xe0001000

08000534 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000534:	b480      	push	{r7}
 8000536:	b087      	sub	sp, #28
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800053c:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <DelayUS+0x40>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <DelayUS+0x44>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	0c9a      	lsrs	r2, r3, #18
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000550:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <DelayUS+0x48>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <DelayUS+0x48>)
 8000558:	685a      	ldr	r2, [r3, #4]
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	429a      	cmp	r2, r3
 8000566:	d8f6      	bhi.n	8000556 <DelayUS+0x22>
}
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	371c      	adds	r7, #28
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000018 	.word	0x20000018
 8000578:	431bde83 	.word	0x431bde83
 800057c:	e0001000 	.word	0xe0001000

08000580 <printMessage>:
		*ptr--= *ptr1;
		*ptr1++ = tmp_char;
	}
	return result;
}
void printMessage(char* message) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	char* lastchar=strrchr(message, ')');
 8000588:	2129      	movs	r1, #41	@ 0x29
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f005 ff5e 	bl	800644c <strrchr>
 8000590:	60f8      	str	r0, [r7, #12]
	if(lastchar==NULL) {
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d104      	bne.n	80005a2 <printMessage+0x22>
		CDC_Transmit_FS((uint8_t *)"Print() requires both parentheses\n         ^\n", 45);
 8000598:	212d      	movs	r1, #45	@ 0x2d
 800059a:	481a      	ldr	r0, [pc, #104]	@ (8000604 <printMessage+0x84>)
 800059c:	f005 fb84 	bl	8005ca8 <CDC_Transmit_FS>
		return;
 80005a0:	e02c      	b.n	80005fc <printMessage+0x7c>
	}
	*lastchar='\0';
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
	uint8_t messageLength=strlen(message);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fdcf 	bl	800014c <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	72fb      	strb	r3, [r7, #11]
	CDC_Transmit_FS((uint8_t *)message, messageLength);
 80005b2:	7afb      	ldrb	r3, [r7, #11]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f005 fb75 	bl	8005ca8 <CDC_Transmit_FS>
	if(messageLength>16) {
 80005be:	7afb      	ldrb	r3, [r7, #11]
 80005c0:	2b10      	cmp	r3, #16
 80005c2:	d912      	bls.n	80005ea <printMessage+0x6a>
		HD44780_Clear();
 80005c4:	f7ff fe54 	bl	8000270 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 80005c8:	2100      	movs	r1, #0
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff fe66 	bl	800029c <HD44780_SetCursor>
		HD44780_PrintStr(message);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff feea 	bl	80003aa <HD44780_PrintStr>
		HD44780_SetCursor(0,1);
 80005d6:	2101      	movs	r1, #1
 80005d8:	2000      	movs	r0, #0
 80005da:	f7ff fe5f 	bl	800029c <HD44780_SetCursor>
		HD44780_PrintStr(message+16);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3310      	adds	r3, #16
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fee1 	bl	80003aa <HD44780_PrintStr>
 80005e8:	e008      	b.n	80005fc <printMessage+0x7c>
	} else {
		HD44780_Clear();
 80005ea:	f7ff fe41 	bl	8000270 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 80005ee:	2100      	movs	r1, #0
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff fe53 	bl	800029c <HD44780_SetCursor>
		HD44780_PrintStr(message);
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff fed7 	bl	80003aa <HD44780_PrintStr>
	}
}
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	080065a4 	.word	0x080065a4

08000608 <printTime>:
void printTime(uint8_t* time) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	while(!newData) {
 8000610:	e06d      	b.n	80006ee <printTime+0xe6>
		HD44780_Clear();
 8000612:	f7ff fe2d 	bl	8000270 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8000616:	2100      	movs	r1, #0
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff fe3f 	bl	800029c <HD44780_SetCursor>
		HD44780_PrintStr((char *)time);
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff fec3 	bl	80003aa <HD44780_PrintStr>
		time[7]++;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3307      	adds	r3, #7
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	3201      	adds	r2, #1
 800062c:	b2d2      	uxtb	r2, r2
 800062e:	701a      	strb	r2, [r3, #0]
		if(time[7]==':'){
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3307      	adds	r3, #7
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b3a      	cmp	r3, #58	@ 0x3a
 8000638:	d155      	bne.n	80006e6 <printTime+0xde>
			time[7]='0';
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3307      	adds	r3, #7
 800063e:	2230      	movs	r2, #48	@ 0x30
 8000640:	701a      	strb	r2, [r3, #0]
			time[6]++;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3306      	adds	r3, #6
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	3201      	adds	r2, #1
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	701a      	strb	r2, [r3, #0]
			if(time[6]=='6') {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3306      	adds	r3, #6
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b36      	cmp	r3, #54	@ 0x36
 8000656:	d146      	bne.n	80006e6 <printTime+0xde>
				time[6]='0';
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3306      	adds	r3, #6
 800065c:	2230      	movs	r2, #48	@ 0x30
 800065e:	701a      	strb	r2, [r3, #0]
				time[4]++;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3304      	adds	r3, #4
 8000664:	781a      	ldrb	r2, [r3, #0]
 8000666:	3201      	adds	r2, #1
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	701a      	strb	r2, [r3, #0]
				if(time[4]==':'){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3304      	adds	r3, #4
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b3a      	cmp	r3, #58	@ 0x3a
 8000674:	d137      	bne.n	80006e6 <printTime+0xde>
					time[4]='0';
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3304      	adds	r3, #4
 800067a:	2230      	movs	r2, #48	@ 0x30
 800067c:	701a      	strb	r2, [r3, #0]
					time[3]++;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3303      	adds	r3, #3
 8000682:	781a      	ldrb	r2, [r3, #0]
 8000684:	3201      	adds	r2, #1
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	701a      	strb	r2, [r3, #0]
					if(time[3]=='6') {
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3303      	adds	r3, #3
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b36      	cmp	r3, #54	@ 0x36
 8000692:	d128      	bne.n	80006e6 <printTime+0xde>
						time[3]='0';
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3303      	adds	r3, #3
 8000698:	2230      	movs	r2, #48	@ 0x30
 800069a:	701a      	strb	r2, [r3, #0]
						time[1]++;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	781a      	ldrb	r2, [r3, #0]
 80006a2:	3201      	adds	r2, #1
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	701a      	strb	r2, [r3, #0]
						if(time[1]==':'){
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3301      	adds	r3, #1
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b3a      	cmp	r3, #58	@ 0x3a
 80006b0:	d109      	bne.n	80006c6 <printTime+0xbe>
							time[1]='0';
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3301      	adds	r3, #1
 80006b6:	2230      	movs	r2, #48	@ 0x30
 80006b8:	701a      	strb	r2, [r3, #0]
							time[0]++;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	701a      	strb	r2, [r3, #0]
						}
						if(time[0]=='2' && time[1]=='4') {
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b32      	cmp	r3, #50	@ 0x32
 80006cc:	d10b      	bne.n	80006e6 <printTime+0xde>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3301      	adds	r3, #1
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b34      	cmp	r3, #52	@ 0x34
 80006d6:	d106      	bne.n	80006e6 <printTime+0xde>
							time[0]='0';
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2230      	movs	r2, #48	@ 0x30
 80006dc:	701a      	strb	r2, [r3, #0]
							time[1]='0';
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3301      	adds	r3, #1
 80006e2:	2230      	movs	r2, #48	@ 0x30
 80006e4:	701a      	strb	r2, [r3, #0]
						}
					}
				}
			}
		}
		HAL_Delay(1000);
 80006e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ea:	f000 faa7 	bl	8000c3c <HAL_Delay>
	while(!newData) {
 80006ee:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <printTime+0xf8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d08d      	beq.n	8000612 <printTime+0xa>
	}
}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000024c 	.word	0x2000024c

08000704 <Execute_command>:
void Execute_command(uint8_t* command) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if((uint8_t *)strstr((char *)command, "PRINT(")==command) {
 800070c:	4911      	ldr	r1, [pc, #68]	@ (8000754 <Execute_command+0x50>)
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f005 feb2 	bl	8006478 <strstr>
 8000714:	4602      	mov	r2, r0
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4293      	cmp	r3, r2
 800071a:	d105      	bne.n	8000728 <Execute_command+0x24>
		printMessage((char *)command+6);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3306      	adds	r3, #6
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff2d 	bl	8000580 <printMessage>
	} else if((uint8_t *)strstr((char *)command, "TIME")==command) {
		printTime(command+4);
	} else {
		CDC_Transmit_FS((uint8_t *)"Invalid command", 15);
	}
}
 8000726:	e011      	b.n	800074c <Execute_command+0x48>
	} else if((uint8_t *)strstr((char *)command, "TIME")==command) {
 8000728:	490b      	ldr	r1, [pc, #44]	@ (8000758 <Execute_command+0x54>)
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f005 fea4 	bl	8006478 <strstr>
 8000730:	4602      	mov	r2, r0
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4293      	cmp	r3, r2
 8000736:	d105      	bne.n	8000744 <Execute_command+0x40>
		printTime(command+4);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3304      	adds	r3, #4
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff63 	bl	8000608 <printTime>
}
 8000742:	e003      	b.n	800074c <Execute_command+0x48>
		CDC_Transmit_FS((uint8_t *)"Invalid command", 15);
 8000744:	210f      	movs	r1, #15
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <Execute_command+0x58>)
 8000748:	f005 faae 	bl	8005ca8 <CDC_Transmit_FS>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	080065d4 	.word	0x080065d4
 8000758:	080065dc 	.word	0x080065dc
 800075c:	080065e4 	.word	0x080065e4

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f000 fa08 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f820 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 f8a6 	bl	80008bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000770:	f000 f876 	bl	8000860 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000774:	f005 f9bc 	bl	8005af0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8000778:	2002      	movs	r0, #2
 800077a:	f7ff fcef 	bl	800015c <HD44780_Init>
  HD44780_Clear();
 800077e:	f7ff fd77 	bl	8000270 <HD44780_Clear>
  HD44780_NoCursor();
 8000782:	f7ff fdd3 	bl	800032c <HD44780_NoCursor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(newData) {
 8000786:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <main+0x44>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d005      	beq.n	800079a <main+0x3a>
		  newData=0;
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <main+0x44>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
		  Execute_command(dataBuffer);
 8000794:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <main+0x48>)
 8000796:	f7ff ffb5 	bl	8000704 <Execute_command>
	  }
	  HAL_Delay(100);
 800079a:	2064      	movs	r0, #100	@ 0x64
 800079c:	f000 fa4e 	bl	8000c3c <HAL_Delay>
	  if(newData) {
 80007a0:	e7f1      	b.n	8000786 <main+0x26>
 80007a2:	bf00      	nop
 80007a4:	2000024c 	.word	0x2000024c
 80007a8:	2000020c 	.word	0x2000020c

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	@ 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b6:	2228      	movs	r2, #40	@ 0x28
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 fe72 	bl	80064a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007dc:	2301      	movs	r3, #1
 80007de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ea:	2301      	movs	r3, #1
 80007ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007f8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fff8 	bl	80027f8 <HAL_RCC_OscConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800080e:	f000 f8ad 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2302      	movs	r3, #2
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000822:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2102      	movs	r1, #2
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fa64 	bl	8002cfc <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800083a:	f000 f897 	bl	800096c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800083e:	2310      	movs	r3, #16
 8000840:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4618      	mov	r0, r3
 800084a:	f002 fbdb 	bl	8003004 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000854:	f000 f88a 	bl	800096c <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3750      	adds	r7, #80	@ 0x50
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000866:	4a13      	ldr	r2, [pc, #76]	@ (80008b4 <MX_I2C1_Init+0x54>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_I2C1_Init+0x50>)
 800086c:	4a12      	ldr	r2, [pc, #72]	@ (80008b8 <MX_I2C1_Init+0x58>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_I2C1_Init+0x50>)
 800087e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000882:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <MX_I2C1_Init+0x50>)
 800089e:	f000 fc9b 	bl	80011d8 <HAL_I2C_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 f860 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200001b8 	.word	0x200001b8
 80008b4:	40005400 	.word	0x40005400
 80008b8:	000186a0 	.word	0x000186a0

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d0:	4b24      	ldr	r3, [pc, #144]	@ (8000964 <MX_GPIO_Init+0xa8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <MX_GPIO_Init+0xa8>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b21      	ldr	r3, [pc, #132]	@ (8000964 <MX_GPIO_Init+0xa8>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_GPIO_Init+0xa8>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000964 <MX_GPIO_Init+0xa8>)
 80008ee:	f043 0320 	orr.w	r3, r3, #32
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_GPIO_Init+0xa8>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0320 	and.w	r3, r3, #32
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_GPIO_Init+0xa8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a17      	ldr	r2, [pc, #92]	@ (8000964 <MX_GPIO_Init+0xa8>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_GPIO_Init+0xa8>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_GPIO_Init+0xa8>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a11      	ldr	r2, [pc, #68]	@ (8000964 <MX_GPIO_Init+0xa8>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_GPIO_Init+0xa8>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0308 	and.w	r3, r3, #8
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000936:	480c      	ldr	r0, [pc, #48]	@ (8000968 <MX_GPIO_Init+0xac>)
 8000938:	f000 fc36 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800093c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2302      	movs	r3, #2
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4619      	mov	r1, r3
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_GPIO_Init+0xac>)
 8000956:	f000 faa3 	bl	8000ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40011000 	.word	0x40011000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_Handler+0x8>

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <HAL_MspInit+0x5c>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a14      	ldr	r2, [pc, #80]	@ (80009d4 <HAL_MspInit+0x5c>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <HAL_MspInit+0x5c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <HAL_MspInit+0x5c>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a0e      	ldr	r2, [pc, #56]	@ (80009d4 <HAL_MspInit+0x5c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <HAL_MspInit+0x5c>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <HAL_MspInit+0x60>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <HAL_MspInit+0x60>)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010000 	.word	0x40010000

080009dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a15      	ldr	r2, [pc, #84]	@ (8000a4c <HAL_I2C_MspInit+0x70>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d123      	bne.n	8000a44 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <HAL_I2C_MspInit+0x74>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <HAL_I2C_MspInit+0x74>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <HAL_I2C_MspInit+0x74>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a14:	23c0      	movs	r3, #192	@ 0xc0
 8000a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a18:	2312      	movs	r3, #18
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	480b      	ldr	r0, [pc, #44]	@ (8000a54 <HAL_I2C_MspInit+0x78>)
 8000a28:	f000 fa3a 	bl	8000ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_I2C_MspInit+0x74>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <HAL_I2C_MspInit+0x74>)
 8000a32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a36:	61d3      	str	r3, [r2, #28]
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <HAL_I2C_MspInit+0x74>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <NMI_Handler+0x4>

08000a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <MemManage_Handler+0x4>

08000a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 f8ac 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ab4:	4802      	ldr	r0, [pc, #8]	@ (8000ac0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ab6:	f001 f8c4 	bl	8001c42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000f1c 	.word	0x20000f1c

08000ac4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <SystemInit+0x5c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a14      	ldr	r2, [pc, #80]	@ (8000b20 <SystemInit+0x5c>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <SystemInit+0x5c>)
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	4911      	ldr	r1, [pc, #68]	@ (8000b20 <SystemInit+0x5c>)
 8000ada:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <SystemInit+0x60>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <SystemInit+0x5c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8000b20 <SystemInit+0x5c>)
 8000ae6:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000aee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000af0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <SystemInit+0x5c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <SystemInit+0x5c>)
 8000af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000afa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <SystemInit+0x5c>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <SystemInit+0x5c>)
 8000b02:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000b06:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <SystemInit+0x5c>)
 8000b0a:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 8000b0e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <SystemInit+0x64>)
 8000b12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b16:	609a      	str	r2, [r3, #8]
#endif 
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000
 8000b24:	f8ff0000 	.word	0xf8ff0000
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b2c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b2e:	e003      	b.n	8000b38 <LoopCopyDataInit>

08000b30 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b30:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b32:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b34:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b36:	3104      	adds	r1, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b38:	480a      	ldr	r0, [pc, #40]	@ (8000b64 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b3c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b3e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b40:	d3f6      	bcc.n	8000b30 <CopyDataInit>
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b44:	e002      	b.n	8000b4c <LoopFillZerobss>

08000b46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b48:	f842 3b04 	str.w	r3, [r2], #4

08000b4c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b4e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b50:	d3f9      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b52:	f7ff ffb7 	bl	8000ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f005 fcad 	bl	80064b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5a:	f7ff fe01 	bl	8000760 <main>
  bx lr
 8000b5e:	4770      	bx	lr
  ldr r3, =_sidata
 8000b60:	08006674 	.word	0x08006674
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b68:	20000194 	.word	0x20000194
  ldr r2, =_sbss
 8000b6c:	20000194 	.word	0x20000194
  ldr r3, = _ebss
 8000b70:	200013a8 	.word	0x200013a8

08000b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_2_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_Init+0x28>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <HAL_Init+0x28>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f947 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	200f      	movs	r0, #15
 8000b90:	f000 f808 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fef0 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40022000 	.word	0x40022000

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f95f 	bl	8000e86 <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	f000 f927 	bl	8000e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	@ (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000018 	.word	0x20000018
 8000bfc:	20000020 	.word	0x20000020
 8000c00:	2000001c 	.word	0x2000001c

08000c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <HAL_IncTick+0x1c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a03      	ldr	r2, [pc, #12]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	20000020 	.word	0x20000020
 8000c24:	20000250 	.word	0x20000250

08000c28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b02      	ldr	r3, [pc, #8]	@ (8000c38 <HAL_GetTick+0x10>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	20000250 	.word	0x20000250

08000c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff fff0 	bl	8000c28 <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c54:	d005      	beq.n	8000c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <HAL_Delay+0x44>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c62:	bf00      	nop
 8000c64:	f7ff ffe0 	bl	8000c28 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8f7      	bhi.n	8000c64 <HAL_Delay+0x28>
  {
  }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000020 	.word	0x20000020

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4906      	ldr	r1, [pc, #24]	@ (8000d1c <__NVIC_EnableIRQ+0x34>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	@ (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	@ (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	@ 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dfc:	f7ff ff90 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff2d 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e44:	f7ff ff42 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	6978      	ldr	r0, [r7, #20]
 8000e50:	f7ff ff90 	bl	8000d74 <NVIC_EncodePriority>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff5f 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff35 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffa2 	bl	8000dd8 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b08b      	sub	sp, #44	@ 0x2c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e169      	b.n	8001188 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 8158 	bne.w	8001182 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	4a9a      	ldr	r2, [pc, #616]	@ (8001140 <HAL_GPIO_Init+0x2a0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d05e      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000edc:	4a98      	ldr	r2, [pc, #608]	@ (8001140 <HAL_GPIO_Init+0x2a0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d875      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000ee2:	4a98      	ldr	r2, [pc, #608]	@ (8001144 <HAL_GPIO_Init+0x2a4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d058      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000ee8:	4a96      	ldr	r2, [pc, #600]	@ (8001144 <HAL_GPIO_Init+0x2a4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d86f      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000eee:	4a96      	ldr	r2, [pc, #600]	@ (8001148 <HAL_GPIO_Init+0x2a8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d052      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000ef4:	4a94      	ldr	r2, [pc, #592]	@ (8001148 <HAL_GPIO_Init+0x2a8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d869      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000efa:	4a94      	ldr	r2, [pc, #592]	@ (800114c <HAL_GPIO_Init+0x2ac>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d04c      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000f00:	4a92      	ldr	r2, [pc, #584]	@ (800114c <HAL_GPIO_Init+0x2ac>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d863      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000f06:	4a92      	ldr	r2, [pc, #584]	@ (8001150 <HAL_GPIO_Init+0x2b0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d046      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000f0c:	4a90      	ldr	r2, [pc, #576]	@ (8001150 <HAL_GPIO_Init+0x2b0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d85d      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d82a      	bhi.n	8000f6c <HAL_GPIO_Init+0xcc>
 8000f16:	2b12      	cmp	r3, #18
 8000f18:	d859      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f20 <HAL_GPIO_Init+0x80>)
 8000f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f20:	08000f9b 	.word	0x08000f9b
 8000f24:	08000f75 	.word	0x08000f75
 8000f28:	08000f87 	.word	0x08000f87
 8000f2c:	08000fc9 	.word	0x08000fc9
 8000f30:	08000fcf 	.word	0x08000fcf
 8000f34:	08000fcf 	.word	0x08000fcf
 8000f38:	08000fcf 	.word	0x08000fcf
 8000f3c:	08000fcf 	.word	0x08000fcf
 8000f40:	08000fcf 	.word	0x08000fcf
 8000f44:	08000fcf 	.word	0x08000fcf
 8000f48:	08000fcf 	.word	0x08000fcf
 8000f4c:	08000fcf 	.word	0x08000fcf
 8000f50:	08000fcf 	.word	0x08000fcf
 8000f54:	08000fcf 	.word	0x08000fcf
 8000f58:	08000fcf 	.word	0x08000fcf
 8000f5c:	08000fcf 	.word	0x08000fcf
 8000f60:	08000fcf 	.word	0x08000fcf
 8000f64:	08000f7d 	.word	0x08000f7d
 8000f68:	08000f91 	.word	0x08000f91
 8000f6c:	4a79      	ldr	r2, [pc, #484]	@ (8001154 <HAL_GPIO_Init+0x2b4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f72:	e02c      	b.n	8000fce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	623b      	str	r3, [r7, #32]
          break;
 8000f7a:	e029      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	3304      	adds	r3, #4
 8000f82:	623b      	str	r3, [r7, #32]
          break;
 8000f84:	e024      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	3308      	adds	r3, #8
 8000f8c:	623b      	str	r3, [r7, #32]
          break;
 8000f8e:	e01f      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	330c      	adds	r3, #12
 8000f96:	623b      	str	r3, [r7, #32]
          break;
 8000f98:	e01a      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	623b      	str	r3, [r7, #32]
          break;
 8000fa6:	e013      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d105      	bne.n	8000fbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	611a      	str	r2, [r3, #16]
          break;
 8000fba:	e009      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	615a      	str	r2, [r3, #20]
          break;
 8000fc6:	e003      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
          break;
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          break;
 8000fce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2bff      	cmp	r3, #255	@ 0xff
 8000fd4:	d801      	bhi.n	8000fda <HAL_GPIO_Init+0x13a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	e001      	b.n	8000fde <HAL_GPIO_Init+0x13e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2bff      	cmp	r3, #255	@ 0xff
 8000fe4:	d802      	bhi.n	8000fec <HAL_GPIO_Init+0x14c>
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	e002      	b.n	8000ff2 <HAL_GPIO_Init+0x152>
 8000fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fee:	3b08      	subs	r3, #8
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	210f      	movs	r1, #15
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	401a      	ands	r2, r3
 8001004:	6a39      	ldr	r1, [r7, #32]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	431a      	orrs	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 80b1 	beq.w	8001182 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001020:	4b4d      	ldr	r3, [pc, #308]	@ (8001158 <HAL_GPIO_Init+0x2b8>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a4c      	ldr	r2, [pc, #304]	@ (8001158 <HAL_GPIO_Init+0x2b8>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b4a      	ldr	r3, [pc, #296]	@ (8001158 <HAL_GPIO_Init+0x2b8>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001038:	4a48      	ldr	r2, [pc, #288]	@ (800115c <HAL_GPIO_Init+0x2bc>)
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001044:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a40      	ldr	r2, [pc, #256]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d013      	beq.n	800108c <HAL_GPIO_Init+0x1ec>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a3f      	ldr	r2, [pc, #252]	@ (8001164 <HAL_GPIO_Init+0x2c4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d00d      	beq.n	8001088 <HAL_GPIO_Init+0x1e8>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a3e      	ldr	r2, [pc, #248]	@ (8001168 <HAL_GPIO_Init+0x2c8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0x1e4>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a3d      	ldr	r2, [pc, #244]	@ (800116c <HAL_GPIO_Init+0x2cc>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d101      	bne.n	8001080 <HAL_GPIO_Init+0x1e0>
 800107c:	2303      	movs	r3, #3
 800107e:	e006      	b.n	800108e <HAL_GPIO_Init+0x1ee>
 8001080:	2304      	movs	r3, #4
 8001082:	e004      	b.n	800108e <HAL_GPIO_Init+0x1ee>
 8001084:	2302      	movs	r3, #2
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0x1ee>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_GPIO_Init+0x1ee>
 800108c:	2300      	movs	r3, #0
 800108e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	4093      	lsls	r3, r2
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800109e:	492f      	ldr	r1, [pc, #188]	@ (800115c <HAL_GPIO_Init+0x2bc>)
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	492c      	ldr	r1, [pc, #176]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4928      	ldr	r1, [pc, #160]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010e0:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4922      	ldr	r1, [pc, #136]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	491e      	ldr	r1, [pc, #120]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001108:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	4918      	ldr	r1, [pc, #96]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	608b      	str	r3, [r1, #8]
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001116:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	43db      	mvns	r3, r3
 800111e:	4914      	ldr	r1, [pc, #80]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 8001120:	4013      	ands	r3, r2
 8001122:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d021      	beq.n	8001174 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	490e      	ldr	r1, [pc, #56]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	60cb      	str	r3, [r1, #12]
 800113c:	e021      	b.n	8001182 <HAL_GPIO_Init+0x2e2>
 800113e:	bf00      	nop
 8001140:	10320000 	.word	0x10320000
 8001144:	10310000 	.word	0x10310000
 8001148:	10220000 	.word	0x10220000
 800114c:	10210000 	.word	0x10210000
 8001150:	10120000 	.word	0x10120000
 8001154:	10110000 	.word	0x10110000
 8001158:	40021000 	.word	0x40021000
 800115c:	40010000 	.word	0x40010000
 8001160:	40010800 	.word	0x40010800
 8001164:	40010c00 	.word	0x40010c00
 8001168:	40011000 	.word	0x40011000
 800116c:	40011400 	.word	0x40011400
 8001170:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	43db      	mvns	r3, r3
 800117c:	4909      	ldr	r1, [pc, #36]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 800117e:	4013      	ands	r3, r2
 8001180:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001184:	3301      	adds	r3, #1
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	fa22 f303 	lsr.w	r3, r2, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	f47f ae8e 	bne.w	8000eb4 <HAL_GPIO_Init+0x14>
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	372c      	adds	r7, #44	@ 0x2c
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011c4:	e003      	b.n	80011ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	611a      	str	r2, [r3, #16]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e11b      	b.n	8001422 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d106      	bne.n	8001204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fbec 	bl	80009dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2224      	movs	r2, #36	@ 0x24
 8001208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0201 	bic.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800121c:	f001 fec0 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 8001220:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4a81      	ldr	r2, [pc, #516]	@ (800142c <HAL_I2C_Init+0x254>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d807      	bhi.n	800123c <HAL_I2C_Init+0x64>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4a80      	ldr	r2, [pc, #512]	@ (8001430 <HAL_I2C_Init+0x258>)
 8001230:	4293      	cmp	r3, r2
 8001232:	bf94      	ite	ls
 8001234:	2301      	movls	r3, #1
 8001236:	2300      	movhi	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	e006      	b.n	800124a <HAL_I2C_Init+0x72>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4a7d      	ldr	r2, [pc, #500]	@ (8001434 <HAL_I2C_Init+0x25c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	bf94      	ite	ls
 8001244:	2301      	movls	r3, #1
 8001246:	2300      	movhi	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e0e7      	b.n	8001422 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4a78      	ldr	r2, [pc, #480]	@ (8001438 <HAL_I2C_Init+0x260>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0c9b      	lsrs	r3, r3, #18
 800125c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	430a      	orrs	r2, r1
 8001270:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4a6a      	ldr	r2, [pc, #424]	@ (800142c <HAL_I2C_Init+0x254>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d802      	bhi.n	800128c <HAL_I2C_Init+0xb4>
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3301      	adds	r3, #1
 800128a:	e009      	b.n	80012a0 <HAL_I2C_Init+0xc8>
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	4a69      	ldr	r2, [pc, #420]	@ (800143c <HAL_I2C_Init+0x264>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	099b      	lsrs	r3, r3, #6
 800129e:	3301      	adds	r3, #1
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	430b      	orrs	r3, r1
 80012a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80012b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	495c      	ldr	r1, [pc, #368]	@ (800142c <HAL_I2C_Init+0x254>)
 80012bc:	428b      	cmp	r3, r1
 80012be:	d819      	bhi.n	80012f4 <HAL_I2C_Init+0x11c>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1e59      	subs	r1, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ce:	1c59      	adds	r1, r3, #1
 80012d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80012d4:	400b      	ands	r3, r1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00a      	beq.n	80012f0 <HAL_I2C_Init+0x118>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1e59      	subs	r1, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012e8:	3301      	adds	r3, #1
 80012ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ee:	e051      	b.n	8001394 <HAL_I2C_Init+0x1bc>
 80012f0:	2304      	movs	r3, #4
 80012f2:	e04f      	b.n	8001394 <HAL_I2C_Init+0x1bc>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d111      	bne.n	8001320 <HAL_I2C_Init+0x148>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1e58      	subs	r0, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6859      	ldr	r1, [r3, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	440b      	add	r3, r1
 800130a:	fbb0 f3f3 	udiv	r3, r0, r3
 800130e:	3301      	adds	r3, #1
 8001310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf0c      	ite	eq
 8001318:	2301      	moveq	r3, #1
 800131a:	2300      	movne	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	e012      	b.n	8001346 <HAL_I2C_Init+0x16e>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1e58      	subs	r0, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	0099      	lsls	r1, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	fbb0 f3f3 	udiv	r3, r0, r3
 8001336:	3301      	adds	r3, #1
 8001338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf0c      	ite	eq
 8001340:	2301      	moveq	r3, #1
 8001342:	2300      	movne	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_I2C_Init+0x176>
 800134a:	2301      	movs	r3, #1
 800134c:	e022      	b.n	8001394 <HAL_I2C_Init+0x1bc>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10e      	bne.n	8001374 <HAL_I2C_Init+0x19c>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1e58      	subs	r0, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6859      	ldr	r1, [r3, #4]
 800135e:	460b      	mov	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	440b      	add	r3, r1
 8001364:	fbb0 f3f3 	udiv	r3, r0, r3
 8001368:	3301      	adds	r3, #1
 800136a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001372:	e00f      	b.n	8001394 <HAL_I2C_Init+0x1bc>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1e58      	subs	r0, r3, #1
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6859      	ldr	r1, [r3, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	0099      	lsls	r1, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	fbb0 f3f3 	udiv	r3, r0, r3
 800138a:	3301      	adds	r3, #1
 800138c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001390:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	6809      	ldr	r1, [r1, #0]
 8001398:	4313      	orrs	r3, r2
 800139a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69da      	ldr	r2, [r3, #28]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80013c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6911      	ldr	r1, [r2, #16]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68d2      	ldr	r2, [r2, #12]
 80013ce:	4311      	orrs	r1, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2220      	movs	r2, #32
 800140e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	000186a0 	.word	0x000186a0
 8001430:	001e847f 	.word	0x001e847f
 8001434:	003d08ff 	.word	0x003d08ff
 8001438:	431bde83 	.word	0x431bde83
 800143c:	10624dd3 	.word	0x10624dd3

08001440 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af02      	add	r7, sp, #8
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	461a      	mov	r2, r3
 800144c:	460b      	mov	r3, r1
 800144e:	817b      	strh	r3, [r7, #10]
 8001450:	4613      	mov	r3, r2
 8001452:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff fbe8 	bl	8000c28 <HAL_GetTick>
 8001458:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b20      	cmp	r3, #32
 8001464:	f040 80e0 	bne.w	8001628 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2319      	movs	r3, #25
 800146e:	2201      	movs	r2, #1
 8001470:	4970      	ldr	r1, [pc, #448]	@ (8001634 <HAL_I2C_Master_Transmit+0x1f4>)
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 f958 	bl	8001728 <I2C_WaitOnFlagUntilTimeout>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800147e:	2302      	movs	r3, #2
 8001480:	e0d3      	b.n	800162a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_I2C_Master_Transmit+0x50>
 800148c:	2302      	movs	r3, #2
 800148e:	e0cc      	b.n	800162a <HAL_I2C_Master_Transmit+0x1ea>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d007      	beq.n	80014b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 0201 	orr.w	r2, r2, #1
 80014b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2221      	movs	r2, #33	@ 0x21
 80014ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2210      	movs	r2, #16
 80014d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	893a      	ldrh	r2, [r7, #8]
 80014e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4a50      	ldr	r2, [pc, #320]	@ (8001638 <HAL_I2C_Master_Transmit+0x1f8>)
 80014f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014f8:	8979      	ldrh	r1, [r7, #10]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	6a3a      	ldr	r2, [r7, #32]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 f89c 	bl	800163c <I2C_MasterRequestWrite>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e08d      	b.n	800162a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001524:	e066      	b.n	80015f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	6a39      	ldr	r1, [r7, #32]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f9d2 	bl	80018d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00d      	beq.n	8001552 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	2b04      	cmp	r3, #4
 800153c:	d107      	bne.n	800154e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800154c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e06b      	b.n	800162a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	b29a      	uxth	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800157a:	3b01      	subs	r3, #1
 800157c:	b29a      	uxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b04      	cmp	r3, #4
 800158e:	d11b      	bne.n	80015c8 <HAL_I2C_Master_Transmit+0x188>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001594:	2b00      	cmp	r3, #0
 8001596:	d017      	beq.n	80015c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015c0:	3b01      	subs	r3, #1
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	6a39      	ldr	r1, [r7, #32]
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 f9c2 	bl	8001956 <I2C_WaitOnBTFFlagUntilTimeout>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00d      	beq.n	80015f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d107      	bne.n	80015f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e01a      	b.n	800162a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d194      	bne.n	8001526 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800160a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2220      	movs	r2, #32
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	e000      	b.n	800162a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001628:	2302      	movs	r3, #2
  }
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	00100002 	.word	0x00100002
 8001638:	ffff0000 	.word	0xffff0000

0800163c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af02      	add	r7, sp, #8
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	460b      	mov	r3, r1
 800164a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001650:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b08      	cmp	r3, #8
 8001656:	d006      	beq.n	8001666 <I2C_MasterRequestWrite+0x2a>
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d003      	beq.n	8001666 <I2C_MasterRequestWrite+0x2a>
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001664:	d108      	bne.n	8001678 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e00b      	b.n	8001690 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167c:	2b12      	cmp	r3, #18
 800167e:	d107      	bne.n	8001690 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800168e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 f843 	bl	8001728 <I2C_WaitOnFlagUntilTimeout>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e035      	b.n	8001718 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016b4:	d108      	bne.n	80016c8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016b6:	897b      	ldrh	r3, [r7, #10]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80016c4:	611a      	str	r2, [r3, #16]
 80016c6:	e01b      	b.n	8001700 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016c8:	897b      	ldrh	r3, [r7, #10]
 80016ca:	11db      	asrs	r3, r3, #7
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f003 0306 	and.w	r3, r3, #6
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f063 030f 	orn	r3, r3, #15
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	490e      	ldr	r1, [pc, #56]	@ (8001720 <I2C_MasterRequestWrite+0xe4>)
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f875 	bl	80017d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e010      	b.n	8001718 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80016f6:	897b      	ldrh	r3, [r7, #10]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	4907      	ldr	r1, [pc, #28]	@ (8001724 <I2C_MasterRequestWrite+0xe8>)
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 f865 	bl	80017d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	00010008 	.word	0x00010008
 8001724:	00010002 	.word	0x00010002

08001728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	4613      	mov	r3, r2
 8001736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001738:	e025      	b.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001740:	d021      	beq.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001742:	f7ff fa71 	bl	8000c28 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d302      	bcc.n	8001758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d116      	bne.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2220      	movs	r2, #32
 8001762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f043 0220 	orr.w	r2, r3, #32
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e023      	b.n	80017ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	0c1b      	lsrs	r3, r3, #16
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d10d      	bne.n	80017ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4013      	ands	r3, r2
 800179c:	b29b      	uxth	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf0c      	ite	eq
 80017a2:	2301      	moveq	r3, #1
 80017a4:	2300      	movne	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	e00c      	b.n	80017c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4013      	ands	r3, r2
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	bf0c      	ite	eq
 80017be:	2301      	moveq	r3, #1
 80017c0:	2300      	movne	r3, #0
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d0b6      	beq.n	800173a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017e4:	e051      	b.n	800188a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017f4:	d123      	bne.n	800183e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001804:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800180e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2220      	movs	r2, #32
 800181a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f043 0204 	orr.w	r2, r3, #4
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e046      	b.n	80018cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001844:	d021      	beq.n	800188a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001846:	f7ff f9ef 	bl	8000c28 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	d302      	bcc.n	800185c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d116      	bne.n	800188a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2220      	movs	r2, #32
 8001866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	f043 0220 	orr.w	r2, r3, #32
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e020      	b.n	80018cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d10c      	bne.n	80018ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4013      	ands	r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bf14      	ite	ne
 80018a6:	2301      	movne	r3, #1
 80018a8:	2300      	moveq	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	e00b      	b.n	80018c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	43da      	mvns	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	4013      	ands	r3, r2
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf14      	ite	ne
 80018c0:	2301      	movne	r3, #1
 80018c2:	2300      	moveq	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d18d      	bne.n	80017e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018e0:	e02d      	b.n	800193e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f878 	bl	80019d8 <I2C_IsAcknowledgeFailed>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e02d      	b.n	800194e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018f8:	d021      	beq.n	800193e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fa:	f7ff f995 	bl	8000c28 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	429a      	cmp	r2, r3
 8001908:	d302      	bcc.n	8001910 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d116      	bne.n	800193e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2220      	movs	r2, #32
 800191a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f043 0220 	orr.w	r2, r3, #32
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e007      	b.n	800194e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001948:	2b80      	cmp	r3, #128	@ 0x80
 800194a:	d1ca      	bne.n	80018e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001962:	e02d      	b.n	80019c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f837 	bl	80019d8 <I2C_IsAcknowledgeFailed>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e02d      	b.n	80019d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800197a:	d021      	beq.n	80019c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800197c:	f7ff f954 	bl	8000c28 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	429a      	cmp	r2, r3
 800198a:	d302      	bcc.n	8001992 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d116      	bne.n	80019c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	f043 0220 	orr.w	r2, r3, #32
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e007      	b.n	80019d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d1ca      	bne.n	8001964 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ee:	d11b      	bne.n	8001a28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80019f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	f043 0204 	orr.w	r2, r3, #4
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a36:	b08b      	sub	sp, #44	@ 0x2c
 8001a38:	af06      	add	r7, sp, #24
 8001a3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0d3      	b.n	8001bee <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3229 	ldrb.w	r3, [r3, #553]	@ 0x229
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f004 fa58 	bl	8005f10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2203      	movs	r2, #3
 8001a64:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 fba6 	bl	80031be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	687e      	ldr	r6, [r7, #4]
 8001a7a:	466d      	mov	r5, sp
 8001a7c:	f106 0410 	add.w	r4, r6, #16
 8001a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	602b      	str	r3, [r5, #0]
 8001a88:	1d33      	adds	r3, r6, #4
 8001a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a8c:	6838      	ldr	r0, [r7, #0]
 8001a8e:	f001 fb6f 	bl	8003170 <USB_CoreInit>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0a4      	b.n	8001bee <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f001 fba3 	bl	80031f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e035      	b.n	8001b22 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	015b      	lsls	r3, r3, #5
 8001abc:	4413      	add	r3, r2
 8001abe:	3329      	adds	r3, #41	@ 0x29
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	015b      	lsls	r3, r3, #5
 8001aca:	4413      	add	r3, r2
 8001acc:	3328      	adds	r3, #40	@ 0x28
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	b291      	uxth	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	015b      	lsls	r3, r3, #5
 8001adc:	4413      	add	r3, r2
 8001ade:	3336      	adds	r3, #54	@ 0x36
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	015b      	lsls	r3, r3, #5
 8001aea:	4413      	add	r3, r2
 8001aec:	332b      	adds	r3, #43	@ 0x2b
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	015b      	lsls	r3, r3, #5
 8001af8:	4413      	add	r3, r2
 8001afa:	3338      	adds	r3, #56	@ 0x38
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	015b      	lsls	r3, r3, #5
 8001b06:	4413      	add	r3, r2
 8001b08:	333c      	adds	r3, #60	@ 0x3c
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	3302      	adds	r3, #2
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	4413      	add	r3, r2
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d3c4      	bcc.n	8001ab6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e031      	b.n	8001b96 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	015b      	lsls	r3, r3, #5
 8001b38:	4413      	add	r3, r2
 8001b3a:	f203 1329 	addw	r3, r3, #297	@ 0x129
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	015b      	lsls	r3, r3, #5
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	015b      	lsls	r3, r3, #5
 8001b58:	4413      	add	r3, r2
 8001b5a:	f203 132b 	addw	r3, r3, #299	@ 0x12b
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	015b      	lsls	r3, r3, #5
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	015b      	lsls	r3, r3, #5
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	330a      	adds	r3, #10
 8001b88:	015b      	lsls	r3, r3, #5
 8001b8a:	4413      	add	r3, r2
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	3301      	adds	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3c8      	bcc.n	8001b32 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	687e      	ldr	r6, [r7, #4]
 8001ba8:	466d      	mov	r5, sp
 8001baa:	f106 0410 	add.w	r4, r6, #16
 8001bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	602b      	str	r3, [r5, #0]
 8001bb6:	1d33      	adds	r3, r6, #4
 8001bb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bba:	6838      	ldr	r0, [r7, #0]
 8001bbc:	f001 fb27 	bl	800320e <USB_DevInit>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00d      	b.n	8001bee <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fb63 	bl	80042b2 <USB_DevDisconnect>

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bf6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_PCD_Start+0x16>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e016      	b.n	8001c3a <HAL_PCD_Start+0x44>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c14:	2101      	movs	r1, #1
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f004 fbe1 	bl	80063de <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 fb3c 	bl	800429e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 fab0 	bl	8003190 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fb39 	bl	80042c6 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c5e:	d102      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 faf3 	bl	800224c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fb2b 	bl	80042c6 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7a:	d112      	bne.n	8001ca2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f004 f9b0 	bl	8005ffa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f8de 	bl	8001e5e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 fb0d 	bl	80042c6 <USB_ReadInterrupts>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 faf6 	bl	80042c6 <USB_ReadInterrupts>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ce4:	d10b      	bne.n	8001cfe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cf8:	b292      	uxth	r2, r2
 8001cfa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 fadf 	bl	80042c6 <USB_ReadInterrupts>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d12:	d126      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	b292      	uxth	r2, r2
 8001d28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0208 	bic.w	r2, r2, #8
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f004 f991 	bl	800606c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 faad 	bl	80042c6 <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d76:	d13d      	bne.n	8001df4 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0208 	orr.w	r2, r2, #8
 8001d8a:	b292      	uxth	r2, r2
 8001d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001da2:	b292      	uxth	r2, r2
 8001da4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0204 	orr.w	r2, r2, #4
 8001dba:	b292      	uxth	r2, r2
 8001dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 fa7e 	bl	80042c6 <USB_ReadInterrupts>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dd4:	d10b      	bne.n	8001dee <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001de8:	b292      	uxth	r2, r2
 8001dea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f004 f922 	bl	8006038 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 fa64 	bl	80042c6 <USB_ReadInterrupts>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e08:	d10e      	bne.n	8001e28 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e1c:	b292      	uxth	r2, r2
 8001e1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f004 f8db 	bl	8005fde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 fa4a 	bl	80042c6 <USB_ReadInterrupts>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e3c:	d10b      	bne.n	8001e56 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e50:	b292      	uxth	r2, r2
 8001e52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_PCD_SetAddress+0x1a>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e013      	b.n	8001ea0 <HAL_PCD_SetAddress+0x42>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
  hpcd->USB_Address = address;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	78fa      	ldrb	r2, [r7, #3]
 8001e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 f9f1 	bl	8004278 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	70fb      	strb	r3, [r7, #3]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	803b      	strh	r3, [r7, #0]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da0b      	bge.n	8001ee6 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	015b      	lsls	r3, r3, #5
 8001ed6:	3328      	adds	r3, #40	@ 0x28
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	705a      	strb	r2, [r3, #1]
 8001ee4:	e00b      	b.n	8001efe <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	015b      	lsls	r3, r3, #5
 8001eee:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f0a:	883a      	ldrh	r2, [r7, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	78ba      	ldrb	r2, [r7, #2]
 8001f14:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f28:	78bb      	ldrb	r3, [r7, #2]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d102      	bne.n	8001f34 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_PCD_EP_Open+0x9a>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e00e      	b.n	8001f60 <HAL_PCD_EP_Open+0xb8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68f9      	ldr	r1, [r7, #12]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 f981 	bl	8003258 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228

  return ret;
 8001f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	da0b      	bge.n	8001f94 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	015b      	lsls	r3, r3, #5
 8001f84:	3328      	adds	r3, #40	@ 0x28
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	705a      	strb	r2, [r3, #1]
 8001f92:	e00b      	b.n	8001fac <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	015b      	lsls	r3, r3, #5
 8001f9c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_PCD_EP_Close+0x5e>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e00e      	b.n	8001fe4 <HAL_PCD_EP_Close+0x7c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68f9      	ldr	r1, [r7, #12]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f001 fc2b 	bl	8003830 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ffc:	7afb      	ldrb	r3, [r7, #11]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	015b      	lsls	r3, r3, #5
 8002004:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2200      	movs	r2, #0
 800201e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2200      	movs	r2, #0
 8002024:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002026:	7afb      	ldrb	r3, [r7, #11]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	b2da      	uxtb	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002032:	7afb      	ldrb	r3, [r7, #11]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6979      	ldr	r1, [r7, #20]
 8002042:	4618      	mov	r0, r3
 8002044:	f001 fd8a 	bl	8003b5c <USB_EPStartXfer>
 8002048:	e005      	b.n	8002056 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	4618      	mov	r0, r3
 8002052:	f001 fd83 	bl	8003b5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	330a      	adds	r3, #10
 8002076:	015b      	lsls	r3, r3, #5
 8002078:	4413      	add	r3, r2
 800207a:	3304      	adds	r3, #4
 800207c:	681b      	ldr	r3, [r3, #0]
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	460b      	mov	r3, r1
 8002096:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002098:	7afb      	ldrb	r3, [r7, #11]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	015b      	lsls	r3, r3, #5
 80020a0:	3328      	adds	r3, #40	@ 0x28
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4413      	add	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2201      	movs	r2, #1
 80020be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c0:	7afb      	ldrb	r3, [r7, #11]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6979      	ldr	r1, [r7, #20]
 80020dc:	4618      	mov	r0, r3
 80020de:	f001 fd3d 	bl	8003b5c <USB_EPStartXfer>
 80020e2:	e005      	b.n	80020f0 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6979      	ldr	r1, [r7, #20]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 fd36 	bl	8003b5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	f003 0207 	and.w	r2, r3, #7
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	d901      	bls.n	8002118 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e046      	b.n	80021a6 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211c:	2b00      	cmp	r3, #0
 800211e:	da0b      	bge.n	8002138 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	015b      	lsls	r3, r3, #5
 8002128:	3328      	adds	r3, #40	@ 0x28
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2201      	movs	r2, #1
 8002134:	705a      	strb	r2, [r3, #1]
 8002136:	e009      	b.n	800214c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	b2da      	uxtb	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_PCD_EP_SetStall+0x72>
 8002168:	2302      	movs	r3, #2
 800216a:	e01c      	b.n	80021a6 <HAL_PCD_EP_SetStall+0xac>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68f9      	ldr	r1, [r7, #12]
 800217a:	4618      	mov	r0, r3
 800217c:	f001 ffa6 	bl	80040cc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	2b00      	cmp	r3, #0
 8002188:	d108      	bne.n	800219c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002194:	4619      	mov	r1, r3
 8002196:	4610      	mov	r0, r2
 8002198:	f002 f8a4 	bl	80042e4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	f003 020f 	and.w	r2, r3, #15
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d901      	bls.n	80021cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e03a      	b.n	8002242 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	da0b      	bge.n	80021ec <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	015b      	lsls	r3, r3, #5
 80021dc:	3328      	adds	r3, #40	@ 0x28
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	705a      	strb	r2, [r3, #1]
 80021ea:	e00b      	b.n	8002204 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	015b      	lsls	r3, r3, #5
 80021f4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_PCD_EP_ClrStall+0x76>
 8002220:	2302      	movs	r3, #2
 8002222:	e00e      	b.n	8002242 <HAL_PCD_EP_ClrStall+0x94>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68f9      	ldr	r1, [r7, #12]
 8002232:	4618      	mov	r0, r3
 8002234:	f001 ff8c 	bl	8004150 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b089      	sub	sp, #36	@ 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002254:	e285      	b.n	8002762 <PCD_EP_ISR_Handler+0x516>
  {
    wIstr = hpcd->Instance->ISTR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800225e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002260:	8afb      	ldrh	r3, [r7, #22]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800226a:	7d7b      	ldrb	r3, [r7, #21]
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 8141 	bne.w	80024f4 <PCD_EP_ISR_Handler+0x2a8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002272:	8afb      	ldrh	r3, [r7, #22]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	d150      	bne.n	800231e <PCD_EP_ISR_Handler+0xd2>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800228c:	b29c      	uxth	r4, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800229a:	b29b      	uxth	r3, r3
 800229c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3328      	adds	r3, #40	@ 0x28
 80022a2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	3302      	adds	r3, #2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	441a      	add	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022de:	2100      	movs	r1, #0
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f003 fe65 	bl	8005fb0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8237 	beq.w	8002762 <PCD_EP_ISR_Handler+0x516>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 8232 	bne.w	8002762 <PCD_EP_ISR_Handler+0x516>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800230a:	b2da      	uxtb	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800231c:	e221      	b.n	8002762 <PCD_EP_ISR_Handler+0x516>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002324:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800232e:	8a7b      	ldrh	r3, [r7, #18]
 8002330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002334:	2b00      	cmp	r3, #0
 8002336:	d033      	beq.n	80023a0 <PCD_EP_ISR_Handler+0x154>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002340:	b29b      	uxth	r3, r3
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	3306      	adds	r3, #6
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f503 710c 	add.w	r1, r3, #560	@ 0x230
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002376:	b29b      	uxth	r3, r3
 8002378:	f002 f803 	bl	8004382 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29a      	uxth	r2, r3
 8002384:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002388:	4013      	ands	r3, r2
 800238a:	b29c      	uxth	r4, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f044 0280 	orr.w	r2, r4, #128	@ 0x80
 8002394:	b292      	uxth	r2, r2
 8002396:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f003 fddf 	bl	8005f5c <HAL_PCD_SetupStageCallback>
 800239e:	e1e0      	b.n	8002762 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f280 81dc 	bge.w	8002762 <PCD_EP_ISR_Handler+0x516>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80023b6:	4013      	ands	r3, r2
 80023b8:	b29c      	uxth	r4, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f044 0280 	orr.w	r2, r4, #128	@ 0x80
 80023c2:	b292      	uxth	r2, r2
 80023c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	3306      	adds	r3, #6
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d019      	beq.n	800242e <PCD_EP_ISR_Handler+0x1e2>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d015      	beq.n	800242e <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6959      	ldr	r1, [r3, #20]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002412:	b29b      	uxth	r3, r3
 8002414:	f001 ffb5 	bl	8004382 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	695a      	ldr	r2, [r3, #20]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	441a      	add	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002426:	2100      	movs	r1, #0
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f003 fda9 	bl	8005f80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461c      	mov	r4, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800243c:	b29b      	uxth	r3, r3
 800243e:	441c      	add	r4, r3
 8002440:	f204 430c 	addw	r3, r4, #1036	@ 0x40c
 8002444:	461c      	mov	r4, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10e      	bne.n	800246c <PCD_EP_ISR_Handler+0x220>
 800244e:	8823      	ldrh	r3, [r4, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8002456:	b29b      	uxth	r3, r3
 8002458:	8023      	strh	r3, [r4, #0]
 800245a:	8823      	ldrh	r3, [r4, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002466:	b29b      	uxth	r3, r3
 8002468:	8023      	strh	r3, [r4, #0]
 800246a:	e02d      	b.n	80024c8 <PCD_EP_ISR_Handler+0x27c>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2b3e      	cmp	r3, #62	@ 0x3e
 8002472:	d812      	bhi.n	800249a <PCD_EP_ISR_Handler+0x24e>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <PCD_EP_ISR_Handler+0x242>
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	3301      	adds	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	b29b      	uxth	r3, r3
 8002492:	029b      	lsls	r3, r3, #10
 8002494:	b29b      	uxth	r3, r3
 8002496:	8023      	strh	r3, [r4, #0]
 8002498:	e016      	b.n	80024c8 <PCD_EP_ISR_Handler+0x27c>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <PCD_EP_ISR_Handler+0x268>
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	029b      	lsls	r3, r3, #10
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024d8:	b29c      	uxth	r4, r3
 80024da:	f484 5380 	eor.w	r3, r4, #4096	@ 0x1000
 80024de:	b29c      	uxth	r4, r3
 80024e0:	f484 5300 	eor.w	r3, r4, #8192	@ 0x2000
 80024e4:	b29c      	uxth	r4, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b97      	ldr	r3, [pc, #604]	@ (8002748 <PCD_EP_ISR_Handler+0x4fc>)
 80024ec:	4323      	orrs	r3, r4
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	8013      	strh	r3, [r2, #0]
 80024f2:	e136      	b.n	8002762 <PCD_EP_ISR_Handler+0x516>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	7d7b      	ldrb	r3, [r7, #21]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002504:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f280 80d1 	bge.w	80026b0 <PCD_EP_ISR_Handler+0x464>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	7d7b      	ldrb	r3, [r7, #21]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b29a      	uxth	r2, r3
 800251e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002522:	4013      	ands	r3, r2
 8002524:	b29c      	uxth	r4, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	7d7b      	ldrb	r3, [r7, #21]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	f044 0280 	orr.w	r2, r4, #128	@ 0x80
 8002536:	b292      	uxth	r2, r2
 8002538:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800253a:	7d7b      	ldrb	r3, [r7, #21]
 800253c:	015b      	lsls	r3, r3, #5
 800253e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	7b1b      	ldrb	r3, [r3, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d121      	bne.n	8002594 <PCD_EP_ISR_Handler+0x348>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	3306      	adds	r3, #6
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002578:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800257a:	8bfb      	ldrh	r3, [r7, #30]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d072      	beq.n	8002666 <PCD_EP_ISR_Handler+0x41a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6959      	ldr	r1, [r3, #20]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	88da      	ldrh	r2, [r3, #6]
 800258c:	8bfb      	ldrh	r3, [r7, #30]
 800258e:	f001 fef8 	bl	8004382 <USB_ReadPMA>
 8002592:	e068      	b.n	8002666 <PCD_EP_ISR_Handler+0x41a>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d021      	beq.n	80025f2 <PCD_EP_ISR_Handler+0x3a6>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	3302      	adds	r3, #2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d6:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80025d8:	8bfb      	ldrh	r3, [r7, #30]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d02a      	beq.n	8002634 <PCD_EP_ISR_Handler+0x3e8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6959      	ldr	r1, [r3, #20]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	891a      	ldrh	r2, [r3, #8]
 80025ea:	8bfb      	ldrh	r3, [r7, #30]
 80025ec:	f001 fec9 	bl	8004382 <USB_ReadPMA>
 80025f0:	e020      	b.n	8002634 <PCD_EP_ISR_Handler+0x3e8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	3306      	adds	r3, #6
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800261a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800261c:	8bfb      	ldrh	r3, [r7, #30]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <PCD_EP_ISR_Handler+0x3e8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6959      	ldr	r1, [r3, #20]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	895a      	ldrh	r2, [r3, #10]
 800262e:	8bfb      	ldrh	r3, [r7, #30]
 8002630:	f001 fea7 	bl	8004382 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800264a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800264e:	b29c      	uxth	r4, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	441a      	add	r2, r3
 800265e:	4b3b      	ldr	r3, [pc, #236]	@ (800274c <PCD_EP_ISR_Handler+0x500>)
 8002660:	4323      	orrs	r3, r4
 8002662:	b29b      	uxth	r3, r3
 8002664:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	8bfb      	ldrh	r3, [r7, #30]
 800266c:	441a      	add	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	8bfb      	ldrh	r3, [r7, #30]
 8002678:	441a      	add	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <PCD_EP_ISR_Handler+0x444>
 8002686:	8bfa      	ldrh	r2, [r7, #30]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d206      	bcs.n	800269e <PCD_EP_ISR_Handler+0x452>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f003 fc72 	bl	8005f80 <HAL_PCD_DataOutStageCallback>
 800269c:	e008      	b.n	80026b0 <PCD_EP_ISR_Handler+0x464>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	7819      	ldrb	r1, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fc9e 	bl	8001fec <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80026b0:	8a7b      	ldrh	r3, [r7, #18]
 80026b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d053      	beq.n	8002762 <PCD_EP_ISR_Handler+0x516>
      {
        ep = &hpcd->IN_ep[epindex];
 80026ba:	7d7b      	ldrb	r3, [r7, #21]
 80026bc:	015b      	lsls	r3, r3, #5
 80026be:	3328      	adds	r3, #40	@ 0x28
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	7d7b      	ldrb	r3, [r7, #21]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80026da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026de:	b29c      	uxth	r4, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	7d7b      	ldrb	r3, [r7, #21]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	441a      	add	r2, r3
 80026ec:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80026f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	3302      	adds	r3, #2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	4413      	add	r3, r2
 8002716:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	441a      	add	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10a      	bne.n	8002750 <PCD_EP_ISR_Handler+0x504>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	4619      	mov	r1, r3
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f003 fc35 	bl	8005fb0 <HAL_PCD_DataInStageCallback>
 8002746:	e00c      	b.n	8002762 <PCD_EP_ISR_Handler+0x516>
 8002748:	ffff8080 	.word	0xffff8080
 800274c:	ffff80c0 	.word	0xffff80c0
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	7819      	ldrb	r1, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff fc93 	bl	8002088 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800276a:	b29b      	uxth	r3, r3
 800276c:	b21b      	sxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	f6ff ad71 	blt.w	8002256 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3724      	adds	r7, #36	@ 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd90      	pop	{r4, r7, pc}
 800277e:	bf00      	nop

08002780 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	460b      	mov	r3, r1
 800278c:	817b      	strh	r3, [r7, #10]
 800278e:	4613      	mov	r3, r2
 8002790:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002792:	897b      	ldrh	r3, [r7, #10]
 8002794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800279e:	897b      	ldrh	r3, [r7, #10]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	015b      	lsls	r3, r3, #5
 80027a6:	3328      	adds	r3, #40	@ 0x28
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e006      	b.n	80027be <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027b0:	897b      	ldrh	r3, [r7, #10]
 80027b2:	015b      	lsls	r3, r3, #5
 80027b4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80027be:	893b      	ldrh	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d107      	bne.n	80027d4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2200      	movs	r2, #0
 80027c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	80da      	strh	r2, [r3, #6]
 80027d2:	e00b      	b.n	80027ec <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2201      	movs	r2, #1
 80027d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	b29a      	uxth	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e272      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8087 	beq.w	8002926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002818:	4b92      	ldr	r3, [pc, #584]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b04      	cmp	r3, #4
 8002822:	d00c      	beq.n	800283e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002824:	4b8f      	ldr	r3, [pc, #572]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d112      	bne.n	8002856 <HAL_RCC_OscConfig+0x5e>
 8002830:	4b8c      	ldr	r3, [pc, #560]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800283c:	d10b      	bne.n	8002856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283e:	4b89      	ldr	r3, [pc, #548]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d06c      	beq.n	8002924 <HAL_RCC_OscConfig+0x12c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d168      	bne.n	8002924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e24c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x76>
 8002860:	4b80      	ldr	r3, [pc, #512]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a7f      	ldr	r2, [pc, #508]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	e02e      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x98>
 8002876:	4b7b      	ldr	r3, [pc, #492]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7a      	ldr	r2, [pc, #488]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800287c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b78      	ldr	r3, [pc, #480]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a77      	ldr	r2, [pc, #476]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002888:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e01d      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0xbc>
 800289a:	4b72      	ldr	r3, [pc, #456]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a71      	ldr	r2, [pc, #452]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 80028b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b68      	ldr	r3, [pc, #416]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a67      	ldr	r2, [pc, #412]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe f9a8 	bl	8000c28 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe f9a4 	bl	8000c28 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	@ 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e200      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0xe4>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe f994 	bl	8000c28 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe f990 	bl	8000c28 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e1ec      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002916:	4b53      	ldr	r3, [pc, #332]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x10c>
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d063      	beq.n	80029fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002932:	4b4c      	ldr	r3, [pc, #304]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800293e:	4b49      	ldr	r3, [pc, #292]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b08      	cmp	r3, #8
 8002948:	d11c      	bne.n	8002984 <HAL_RCC_OscConfig+0x18c>
 800294a:	4b46      	ldr	r3, [pc, #280]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d116      	bne.n	8002984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002956:	4b43      	ldr	r3, [pc, #268]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_RCC_OscConfig+0x176>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d001      	beq.n	800296e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e1c0      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4939      	ldr	r1, [pc, #228]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	e03a      	b.n	80029fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298c:	4b36      	ldr	r3, [pc, #216]	@ (8002a68 <HAL_RCC_OscConfig+0x270>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7fe f949 	bl	8000c28 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299a:	f7fe f945 	bl	8000c28 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e1a1      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4927      	ldr	r1, [pc, #156]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
 80029cc:	e015      	b.n	80029fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ce:	4b26      	ldr	r3, [pc, #152]	@ (8002a68 <HAL_RCC_OscConfig+0x270>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe f928 	bl	8000c28 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029dc:	f7fe f924 	bl	8000c28 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e180      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d03a      	beq.n	8002a7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d019      	beq.n	8002a42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0e:	4b17      	ldr	r3, [pc, #92]	@ (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a14:	f7fe f908 	bl	8000c28 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fe f904 	bl	8000c28 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e160      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f000 fac4 	bl	8002fc8 <RCC_Delay>
 8002a40:	e01c      	b.n	8002a7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a48:	f7fe f8ee 	bl	8000c28 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4e:	e00f      	b.n	8002a70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a50:	f7fe f8ea 	bl	8000c28 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d908      	bls.n	8002a70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e146      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	42420000 	.word	0x42420000
 8002a6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	4b92      	ldr	r3, [pc, #584]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e9      	bne.n	8002a50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80a6 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8e:	4b8b      	ldr	r3, [pc, #556]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10d      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	4b88      	ldr	r3, [pc, #544]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	4a87      	ldr	r2, [pc, #540]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	61d3      	str	r3, [r2, #28]
 8002aa6:	4b85      	ldr	r3, [pc, #532]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab6:	4b82      	ldr	r3, [pc, #520]	@ (8002cc0 <HAL_RCC_OscConfig+0x4c8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d118      	bne.n	8002af4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc0 <HAL_RCC_OscConfig+0x4c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7e      	ldr	r2, [pc, #504]	@ (8002cc0 <HAL_RCC_OscConfig+0x4c8>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ace:	f7fe f8ab 	bl	8000c28 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7fe f8a7 	bl	8000c28 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	@ 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e103      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b75      	ldr	r3, [pc, #468]	@ (8002cc0 <HAL_RCC_OscConfig+0x4c8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x312>
 8002afc:	4b6f      	ldr	r3, [pc, #444]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4a6e      	ldr	r2, [pc, #440]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6213      	str	r3, [r2, #32]
 8002b08:	e02d      	b.n	8002b66 <HAL_RCC_OscConfig+0x36e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x334>
 8002b12:	4b6a      	ldr	r3, [pc, #424]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a69      	ldr	r2, [pc, #420]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	4b67      	ldr	r3, [pc, #412]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4a66      	ldr	r2, [pc, #408]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	6213      	str	r3, [r2, #32]
 8002b2a:	e01c      	b.n	8002b66 <HAL_RCC_OscConfig+0x36e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d10c      	bne.n	8002b4e <HAL_RCC_OscConfig+0x356>
 8002b34:	4b61      	ldr	r3, [pc, #388]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4a60      	ldr	r2, [pc, #384]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6213      	str	r3, [r2, #32]
 8002b40:	4b5e      	ldr	r3, [pc, #376]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a5d      	ldr	r2, [pc, #372]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6213      	str	r3, [r2, #32]
 8002b4c:	e00b      	b.n	8002b66 <HAL_RCC_OscConfig+0x36e>
 8002b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a5a      	ldr	r2, [pc, #360]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	4b58      	ldr	r3, [pc, #352]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4a57      	ldr	r2, [pc, #348]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d015      	beq.n	8002b9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe f85b 	bl	8000c28 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fe f857 	bl	8000c28 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e0b1      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ee      	beq.n	8002b76 <HAL_RCC_OscConfig+0x37e>
 8002b98:	e014      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7fe f845 	bl	8000c28 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7fe f841 	bl	8000c28 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e09b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb8:	4b40      	ldr	r3, [pc, #256]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ee      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d105      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bca:	4b3c      	ldr	r3, [pc, #240]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4a3b      	ldr	r2, [pc, #236]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8087 	beq.w	8002cee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be0:	4b36      	ldr	r3, [pc, #216]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d061      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d146      	bne.n	8002c82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf4:	4b33      	ldr	r3, [pc, #204]	@ (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe f815 	bl	8000c28 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe f811 	bl	8000c28 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e06d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c14:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c28:	d108      	bne.n	8002c3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c2a:	4b24      	ldr	r3, [pc, #144]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4921      	ldr	r1, [pc, #132]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a19      	ldr	r1, [r3, #32]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	491b      	ldr	r1, [pc, #108]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c54:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7fd ffe5 	bl	8000c28 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c62:	f7fd ffe1 	bl	8000c28 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e03d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c74:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x46a>
 8002c80:	e035      	b.n	8002cee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c82:	4b10      	ldr	r3, [pc, #64]	@ (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fd ffce 	bl	8000c28 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fd ffca 	bl	8000c28 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e026      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x498>
 8002cae:	e01e      	b.n	8002cee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e019      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <HAL_RCC_OscConfig+0x500>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0d0      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b6a      	ldr	r3, [pc, #424]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d910      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b67      	ldr	r3, [pc, #412]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	4965      	ldr	r1, [pc, #404]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b63      	ldr	r3, [pc, #396]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0b8      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d58:	4b59      	ldr	r3, [pc, #356]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a58      	ldr	r2, [pc, #352]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d70:	4b53      	ldr	r3, [pc, #332]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a52      	ldr	r2, [pc, #328]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b50      	ldr	r3, [pc, #320]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	494d      	ldr	r1, [pc, #308]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d040      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d115      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e07f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b41      	ldr	r3, [pc, #260]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e073      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e06b      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dda:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4936      	ldr	r1, [pc, #216]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dec:	f7fd ff1c 	bl	8000c28 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7fd ff18 	bl	8000c28 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e053      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 020c 	and.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1eb      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b27      	ldr	r3, [pc, #156]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d210      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b24      	ldr	r3, [pc, #144]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	4922      	ldr	r1, [pc, #136]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e032      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4916      	ldr	r1, [pc, #88]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e76:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490e      	ldr	r1, [pc, #56]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e8a:	f000 f821 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	490a      	ldr	r1, [pc, #40]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	4a09      	ldr	r2, [pc, #36]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_RCC_ClockConfig+0x1d0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fe7a 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40022000 	.word	0x40022000
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	0800664c 	.word	0x0800664c
 8002ec8:	20000018 	.word	0x20000018
 8002ecc:	2000001c 	.word	0x2000001c

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	b490      	push	{r4, r7}
 8002ed2:	b08a      	sub	sp, #40	@ 0x28
 8002ed4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ed6:	4b29      	ldr	r3, [pc, #164]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0xac>)
 8002ed8:	1d3c      	adds	r4, r7, #4
 8002eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ee0:	f240 2301 	movw	r3, #513	@ 0x201
 8002ee4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002efa:	4b21      	ldr	r3, [pc, #132]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d002      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x40>
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_GetSysClockFreq+0x46>
 8002f0e:	e02b      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f10:	4b1c      	ldr	r3, [pc, #112]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f12:	623b      	str	r3, [r7, #32]
      break;
 8002f14:	e02b      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	0c9b      	lsrs	r3, r3, #18
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	3328      	adds	r3, #40	@ 0x28
 8002f20:	443b      	add	r3, r7
 8002f22:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f26:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f32:	4b13      	ldr	r3, [pc, #76]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	0c5b      	lsrs	r3, r3, #17
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	3328      	adds	r3, #40	@ 0x28
 8002f3e:	443b      	add	r3, r7
 8002f40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	4a0e      	ldr	r2, [pc, #56]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f4a:	fb03 f202 	mul.w	r2, r3, r2
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f56:	e004      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f5c:	fb02 f303 	mul.w	r3, r2, r3
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	623b      	str	r3, [r7, #32]
      break;
 8002f66:	e002      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f68:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f6a:	623b      	str	r3, [r7, #32]
      break;
 8002f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3728      	adds	r7, #40	@ 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc90      	pop	{r4, r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	080065f4 	.word	0x080065f4
 8002f80:	40021000 	.word	0x40021000
 8002f84:	007a1200 	.word	0x007a1200
 8002f88:	003d0900 	.word	0x003d0900

08002f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b02      	ldr	r3, [pc, #8]	@ (8002f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	20000018 	.word	0x20000018

08002fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fa4:	f7ff fff2 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	4903      	ldr	r1, [pc, #12]	@ (8002fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	0800665c 	.word	0x0800665c

08002fc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <RCC_Delay+0x34>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003000 <RCC_Delay+0x38>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	0a5b      	lsrs	r3, r3, #9
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fe4:	bf00      	nop
  }
  while (Delay --);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1e5a      	subs	r2, r3, #1
 8002fea:	60fa      	str	r2, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f9      	bne.n	8002fe4 <RCC_Delay+0x1c>
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	20000018 	.word	0x20000018
 8003000:	10624dd3 	.word	0x10624dd3

08003004 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d07d      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003020:	2300      	movs	r3, #0
 8003022:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003024:	4b4f      	ldr	r3, [pc, #316]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10d      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003030:	4b4c      	ldr	r3, [pc, #304]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	4a4b      	ldr	r2, [pc, #300]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800303a:	61d3      	str	r3, [r2, #28]
 800303c:	4b49      	ldr	r3, [pc, #292]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003048:	2301      	movs	r3, #1
 800304a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304c:	4b46      	ldr	r3, [pc, #280]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d118      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003058:	4b43      	ldr	r3, [pc, #268]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a42      	ldr	r2, [pc, #264]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800305e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003062:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003064:	f7fd fde0 	bl	8000c28 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306a:	e008      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306c:	f7fd fddc 	bl	8000c28 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	@ 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e06d      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307e:	4b3a      	ldr	r3, [pc, #232]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800308a:	4b36      	ldr	r3, [pc, #216]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003092:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d02e      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d027      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030b2:	4b2e      	ldr	r3, [pc, #184]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030b8:	4b2c      	ldr	r3, [pc, #176]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030be:	4a29      	ldr	r2, [pc, #164]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d014      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7fd fdab 	bl	8000c28 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d4:	e00a      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7fd fda7 	bl	8000c28 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e036      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ee      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4917      	ldr	r1, [pc, #92]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003106:	4313      	orrs	r3, r2
 8003108:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800310a:	7dfb      	ldrb	r3, [r7, #23]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003110:	4b14      	ldr	r3, [pc, #80]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	4a13      	ldr	r2, [pc, #76]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800311a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003128:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	490b      	ldr	r1, [pc, #44]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003146:	4b07      	ldr	r3, [pc, #28]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	4904      	ldr	r1, [pc, #16]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	40007000 	.word	0x40007000
 800316c:	42420440 	.word	0x42420440

08003170 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003170:	b084      	sub	sp, #16
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	f107 0014 	add.w	r0, r7, #20
 800317e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	b004      	add	sp, #16
 800318e:	4770      	bx	lr

08003190 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003198:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800319c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	89fb      	ldrh	r3, [r7, #14]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80031c6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80031ca:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	b21a      	sxth	r2, r3
 80031d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031da:	43db      	mvns	r3, r3
 80031dc:	b21b      	sxth	r3, r3
 80031de:	4013      	ands	r3, r2
 80031e0:	b21b      	sxth	r3, r3
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800320e:	b084      	sub	sp, #16
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	f107 0014 	add.w	r0, r7, #20
 800321c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ffa5 	bl	8003190 <USB_EnableGlobalInt>

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003252:	b004      	add	sp, #16
 8003254:	4770      	bx	lr
	...

08003258 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003258:	b490      	push	{r4, r7}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	78db      	ldrb	r3, [r3, #3]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d819      	bhi.n	80032ba <USB_ActivateEndpoint+0x62>
 8003286:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <USB_ActivateEndpoint+0x34>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	0800329d 	.word	0x0800329d
 8003290:	080032b1 	.word	0x080032b1
 8003294:	080032c1 	.word	0x080032c1
 8003298:	080032a7 	.word	0x080032a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800329c:	89bb      	ldrh	r3, [r7, #12]
 800329e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032a2:	81bb      	strh	r3, [r7, #12]
      break;
 80032a4:	e00d      	b.n	80032c2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80032a6:	89bb      	ldrh	r3, [r7, #12]
 80032a8:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80032ac:	81bb      	strh	r3, [r7, #12]
      break;
 80032ae:	e008      	b.n	80032c2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80032b0:	89bb      	ldrh	r3, [r7, #12]
 80032b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032b6:	81bb      	strh	r3, [r7, #12]
      break;
 80032b8:	e003      	b.n	80032c2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
      break;
 80032be:	e000      	b.n	80032c2 <USB_ActivateEndpoint+0x6a>
      break;
 80032c0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	441a      	add	r2, r3
 80032cc:	89bb      	ldrh	r3, [r7, #12]
 80032ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032de:	b29b      	uxth	r3, r3
 80032e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	7812      	ldrb	r2, [r2, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	b29c      	uxth	r4, r3
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	441a      	add	r2, r3
 800330c:	4b89      	ldr	r3, [pc, #548]	@ (8003534 <USB_ActivateEndpoint+0x2dc>)
 800330e:	4323      	orrs	r3, r4
 8003310:	b29b      	uxth	r3, r3
 8003312:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	7b1b      	ldrb	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	f040 8111 	bne.w	8003540 <USB_ActivateEndpoint+0x2e8>
  {
    if (ep->is_in != 0U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	785b      	ldrb	r3, [r3, #1]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d067      	beq.n	80033f6 <USB_ActivateEndpoint+0x19e>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003326:	687c      	ldr	r4, [r7, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800332e:	b29b      	uxth	r3, r3
 8003330:	441c      	add	r4, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	4423      	add	r3, r4
 800333a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800333e:	461c      	mov	r4, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	88db      	ldrh	r3, [r3, #6]
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	b29b      	uxth	r3, r3
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	b29b      	uxth	r3, r3
 800334c:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29c      	uxth	r4, r3
 800335c:	4623      	mov	r3, r4
 800335e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d014      	beq.n	8003390 <USB_ActivateEndpoint+0x138>
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800337c:	b29c      	uxth	r4, r3
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	441a      	add	r2, r3
 8003388:	4b6b      	ldr	r3, [pc, #428]	@ (8003538 <USB_ActivateEndpoint+0x2e0>)
 800338a:	4323      	orrs	r3, r4
 800338c:	b29b      	uxth	r3, r3
 800338e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	78db      	ldrb	r3, [r3, #3]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d018      	beq.n	80033ca <USB_ActivateEndpoint+0x172>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ae:	b29c      	uxth	r4, r3
 80033b0:	f084 0320 	eor.w	r3, r4, #32
 80033b4:	b29c      	uxth	r4, r3
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	441a      	add	r2, r3
 80033c0:	4b5c      	ldr	r3, [pc, #368]	@ (8003534 <USB_ActivateEndpoint+0x2dc>)
 80033c2:	4323      	orrs	r3, r4
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	8013      	strh	r3, [r2, #0]
 80033c8:	e22a      	b.n	8003820 <USB_ActivateEndpoint+0x5c8>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033e0:	b29c      	uxth	r4, r3
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	441a      	add	r2, r3
 80033ec:	4b51      	ldr	r3, [pc, #324]	@ (8003534 <USB_ActivateEndpoint+0x2dc>)
 80033ee:	4323      	orrs	r3, r4
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]
 80033f4:	e214      	b.n	8003820 <USB_ActivateEndpoint+0x5c8>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80033f6:	687c      	ldr	r4, [r7, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033fe:	b29b      	uxth	r3, r3
 8003400:	441c      	add	r4, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	4423      	add	r3, r4
 800340a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800340e:	461c      	mov	r4, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	88db      	ldrh	r3, [r3, #6]
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	b29b      	uxth	r3, r3
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	b29b      	uxth	r3, r3
 800341c:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800341e:	687c      	ldr	r4, [r7, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003426:	b29b      	uxth	r3, r3
 8003428:	441c      	add	r4, r3
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	4423      	add	r3, r4
 8003432:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003436:	461c      	mov	r4, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10e      	bne.n	800345e <USB_ActivateEndpoint+0x206>
 8003440:	8823      	ldrh	r3, [r4, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003448:	b29b      	uxth	r3, r3
 800344a:	8023      	strh	r3, [r4, #0]
 800344c:	8823      	ldrh	r3, [r4, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003458:	b29b      	uxth	r3, r3
 800345a:	8023      	strh	r3, [r4, #0]
 800345c:	e02d      	b.n	80034ba <USB_ActivateEndpoint+0x262>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b3e      	cmp	r3, #62	@ 0x3e
 8003464:	d812      	bhi.n	800348c <USB_ActivateEndpoint+0x234>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <USB_ActivateEndpoint+0x228>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3301      	adds	r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	b29b      	uxth	r3, r3
 8003484:	029b      	lsls	r3, r3, #10
 8003486:	b29b      	uxth	r3, r3
 8003488:	8023      	strh	r3, [r4, #0]
 800348a:	e016      	b.n	80034ba <USB_ActivateEndpoint+0x262>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <USB_ActivateEndpoint+0x24e>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	029b      	lsls	r3, r3, #10
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29c      	uxth	r4, r3
 80034c8:	4623      	mov	r3, r4
 80034ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d014      	beq.n	80034fc <USB_ActivateEndpoint+0x2a4>
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e8:	b29c      	uxth	r4, r3
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	441a      	add	r2, r3
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <USB_ActivateEndpoint+0x2e4>)
 80034f6:	4323      	orrs	r3, r4
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800350e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003512:	b29c      	uxth	r4, r3
 8003514:	f484 5380 	eor.w	r3, r4, #4096	@ 0x1000
 8003518:	b29c      	uxth	r4, r3
 800351a:	f484 5300 	eor.w	r3, r4, #8192	@ 0x2000
 800351e:	b29c      	uxth	r4, r3
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	441a      	add	r2, r3
 800352a:	4b02      	ldr	r3, [pc, #8]	@ (8003534 <USB_ActivateEndpoint+0x2dc>)
 800352c:	4323      	orrs	r3, r4
 800352e:	b29b      	uxth	r3, r3
 8003530:	8013      	strh	r3, [r2, #0]
 8003532:	e175      	b.n	8003820 <USB_ActivateEndpoint+0x5c8>
 8003534:	ffff8080 	.word	0xffff8080
 8003538:	ffff80c0 	.word	0xffff80c0
 800353c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003556:	b29c      	uxth	r4, r3
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	441a      	add	r2, r3
 8003562:	4b96      	ldr	r3, [pc, #600]	@ (80037bc <USB_ActivateEndpoint+0x564>)
 8003564:	4323      	orrs	r3, r4
 8003566:	b29b      	uxth	r3, r3
 8003568:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800356a:	687c      	ldr	r4, [r7, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003572:	b29b      	uxth	r3, r3
 8003574:	441c      	add	r4, r3
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	4423      	add	r3, r4
 800357e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003582:	461c      	mov	r4, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	891b      	ldrh	r3, [r3, #8]
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	b29b      	uxth	r3, r3
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	b29b      	uxth	r3, r3
 8003590:	8023      	strh	r3, [r4, #0]
 8003592:	687c      	ldr	r4, [r7, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800359a:	b29b      	uxth	r3, r3
 800359c:	441c      	add	r4, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	4423      	add	r3, r4
 80035a6:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80035aa:	461c      	mov	r4, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	895b      	ldrh	r3, [r3, #10]
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	785b      	ldrb	r3, [r3, #1]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 8088 	bne.w	80036d4 <USB_ActivateEndpoint+0x47c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29c      	uxth	r4, r3
 80035d2:	4623      	mov	r3, r4
 80035d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d014      	beq.n	8003606 <USB_ActivateEndpoint+0x3ae>
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f2:	b29c      	uxth	r4, r3
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	4b70      	ldr	r3, [pc, #448]	@ (80037c0 <USB_ActivateEndpoint+0x568>)
 8003600:	4323      	orrs	r3, r4
 8003602:	b29b      	uxth	r3, r3
 8003604:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	b29c      	uxth	r4, r3
 8003614:	4623      	mov	r3, r4
 8003616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d014      	beq.n	8003648 <USB_ActivateEndpoint+0x3f0>
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003634:	b29c      	uxth	r4, r3
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	441a      	add	r2, r3
 8003640:	4b60      	ldr	r3, [pc, #384]	@ (80037c4 <USB_ActivateEndpoint+0x56c>)
 8003642:	4323      	orrs	r3, r4
 8003644:	b29b      	uxth	r3, r3
 8003646:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800365a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800365e:	b29c      	uxth	r4, r3
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	4b56      	ldr	r3, [pc, #344]	@ (80037c4 <USB_ActivateEndpoint+0x56c>)
 800366c:	4323      	orrs	r3, r4
 800366e:	b29b      	uxth	r3, r3
 8003670:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003688:	b29c      	uxth	r4, r3
 800368a:	f484 5380 	eor.w	r3, r4, #4096	@ 0x1000
 800368e:	b29c      	uxth	r4, r3
 8003690:	f484 5300 	eor.w	r3, r4, #8192	@ 0x2000
 8003694:	b29c      	uxth	r4, r3
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	441a      	add	r2, r3
 80036a0:	4b49      	ldr	r3, [pc, #292]	@ (80037c8 <USB_ActivateEndpoint+0x570>)
 80036a2:	4323      	orrs	r3, r4
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036be:	b29c      	uxth	r4, r3
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	441a      	add	r2, r3
 80036ca:	4b3f      	ldr	r3, [pc, #252]	@ (80037c8 <USB_ActivateEndpoint+0x570>)
 80036cc:	4323      	orrs	r3, r4
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	8013      	strh	r3, [r2, #0]
 80036d2:	e0a5      	b.n	8003820 <USB_ActivateEndpoint+0x5c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29c      	uxth	r4, r3
 80036e2:	4623      	mov	r3, r4
 80036e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d014      	beq.n	8003716 <USB_ActivateEndpoint+0x4be>
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003702:	b29c      	uxth	r4, r3
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	441a      	add	r2, r3
 800370e:	4b2c      	ldr	r3, [pc, #176]	@ (80037c0 <USB_ActivateEndpoint+0x568>)
 8003710:	4323      	orrs	r3, r4
 8003712:	b29b      	uxth	r3, r3
 8003714:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	b29c      	uxth	r4, r3
 8003724:	4623      	mov	r3, r4
 8003726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d014      	beq.n	8003758 <USB_ActivateEndpoint+0x500>
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003744:	b29c      	uxth	r4, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	441a      	add	r2, r3
 8003750:	4b1c      	ldr	r3, [pc, #112]	@ (80037c4 <USB_ActivateEndpoint+0x56c>)
 8003752:	4323      	orrs	r3, r4
 8003754:	b29b      	uxth	r3, r3
 8003756:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800376a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376e:	b29c      	uxth	r4, r3
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	441a      	add	r2, r3
 800377a:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <USB_ActivateEndpoint+0x568>)
 800377c:	4323      	orrs	r3, r4
 800377e:	b29b      	uxth	r3, r3
 8003780:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	78db      	ldrb	r3, [r3, #3]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d020      	beq.n	80037cc <USB_ActivateEndpoint+0x574>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800379c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037a0:	b29c      	uxth	r4, r3
 80037a2:	f084 0320 	eor.w	r3, r4, #32
 80037a6:	b29c      	uxth	r4, r3
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <USB_ActivateEndpoint+0x570>)
 80037b4:	4323      	orrs	r3, r4
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	8013      	strh	r3, [r2, #0]
 80037ba:	e01c      	b.n	80037f6 <USB_ActivateEndpoint+0x59e>
 80037bc:	ffff8180 	.word	0xffff8180
 80037c0:	ffffc080 	.word	0xffffc080
 80037c4:	ffff80c0 	.word	0xffff80c0
 80037c8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037e2:	b29c      	uxth	r4, r3
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	441a      	add	r2, r3
 80037ee:	4b0f      	ldr	r3, [pc, #60]	@ (800382c <USB_ActivateEndpoint+0x5d4>)
 80037f0:	4323      	orrs	r3, r4
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380c:	b29c      	uxth	r4, r3
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	441a      	add	r2, r3
 8003818:	4b04      	ldr	r3, [pc, #16]	@ (800382c <USB_ActivateEndpoint+0x5d4>)
 800381a:	4323      	orrs	r3, r4
 800381c:	b29b      	uxth	r3, r3
 800381e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bc90      	pop	{r4, r7}
 800382a:	4770      	bx	lr
 800382c:	ffff8080 	.word	0xffff8080

08003830 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003830:	b490      	push	{r4, r7}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	7b1b      	ldrb	r3, [r3, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d171      	bne.n	8003926 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d036      	beq.n	80038b8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	b29c      	uxth	r4, r3
 8003858:	4623      	mov	r3, r4
 800385a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d014      	beq.n	800388c <USB_DeactivateEndpoint+0x5c>
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003878:	b29c      	uxth	r4, r3
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	441a      	add	r2, r3
 8003884:	4b6b      	ldr	r3, [pc, #428]	@ (8003a34 <USB_DeactivateEndpoint+0x204>)
 8003886:	4323      	orrs	r3, r4
 8003888:	b29b      	uxth	r3, r3
 800388a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800389e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038a2:	b29c      	uxth	r4, r3
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	441a      	add	r2, r3
 80038ae:	4b62      	ldr	r3, [pc, #392]	@ (8003a38 <USB_DeactivateEndpoint+0x208>)
 80038b0:	4323      	orrs	r3, r4
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	8013      	strh	r3, [r2, #0]
 80038b6:	e144      	b.n	8003b42 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	b29c      	uxth	r4, r3
 80038c6:	4623      	mov	r3, r4
 80038c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d014      	beq.n	80038fa <USB_DeactivateEndpoint+0xca>
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038e6:	b29c      	uxth	r4, r3
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	441a      	add	r2, r3
 80038f2:	4b52      	ldr	r3, [pc, #328]	@ (8003a3c <USB_DeactivateEndpoint+0x20c>)
 80038f4:	4323      	orrs	r3, r4
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800390c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003910:	b29c      	uxth	r4, r3
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	441a      	add	r2, r3
 800391c:	4b46      	ldr	r3, [pc, #280]	@ (8003a38 <USB_DeactivateEndpoint+0x208>)
 800391e:	4323      	orrs	r3, r4
 8003920:	b29b      	uxth	r3, r3
 8003922:	8013      	strh	r3, [r2, #0]
 8003924:	e10d      	b.n	8003b42 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	785b      	ldrb	r3, [r3, #1]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 8088 	bne.w	8003a40 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29c      	uxth	r4, r3
 800393e:	4623      	mov	r3, r4
 8003940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d014      	beq.n	8003972 <USB_DeactivateEndpoint+0x142>
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	b29b      	uxth	r3, r3
 8003956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800395a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395e:	b29c      	uxth	r4, r3
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	4b34      	ldr	r3, [pc, #208]	@ (8003a3c <USB_DeactivateEndpoint+0x20c>)
 800396c:	4323      	orrs	r3, r4
 800396e:	b29b      	uxth	r3, r3
 8003970:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29c      	uxth	r4, r3
 8003980:	4623      	mov	r3, r4
 8003982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d014      	beq.n	80039b4 <USB_DeactivateEndpoint+0x184>
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800399c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a0:	b29c      	uxth	r4, r3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	441a      	add	r2, r3
 80039ac:	4b21      	ldr	r3, [pc, #132]	@ (8003a34 <USB_DeactivateEndpoint+0x204>)
 80039ae:	4323      	orrs	r3, r4
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ca:	b29c      	uxth	r4, r3
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	441a      	add	r2, r3
 80039d6:	4b17      	ldr	r3, [pc, #92]	@ (8003a34 <USB_DeactivateEndpoint+0x204>)
 80039d8:	4323      	orrs	r3, r4
 80039da:	b29b      	uxth	r3, r3
 80039dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f4:	b29c      	uxth	r4, r3
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	4b0d      	ldr	r3, [pc, #52]	@ (8003a38 <USB_DeactivateEndpoint+0x208>)
 8003a02:	4323      	orrs	r3, r4
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a1e:	b29c      	uxth	r4, r3
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	4b03      	ldr	r3, [pc, #12]	@ (8003a38 <USB_DeactivateEndpoint+0x208>)
 8003a2c:	4323      	orrs	r3, r4
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	8013      	strh	r3, [r2, #0]
 8003a32:	e086      	b.n	8003b42 <USB_DeactivateEndpoint+0x312>
 8003a34:	ffff80c0 	.word	0xffff80c0
 8003a38:	ffff8080 	.word	0xffff8080
 8003a3c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29c      	uxth	r4, r3
 8003a4e:	4623      	mov	r3, r4
 8003a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d014      	beq.n	8003a82 <USB_DeactivateEndpoint+0x252>
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6e:	b29c      	uxth	r4, r3
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	441a      	add	r2, r3
 8003a7a:	4b35      	ldr	r3, [pc, #212]	@ (8003b50 <USB_DeactivateEndpoint+0x320>)
 8003a7c:	4323      	orrs	r3, r4
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b29c      	uxth	r4, r3
 8003a90:	4623      	mov	r3, r4
 8003a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d014      	beq.n	8003ac4 <USB_DeactivateEndpoint+0x294>
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab0:	b29c      	uxth	r4, r3
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	441a      	add	r2, r3
 8003abc:	4b25      	ldr	r3, [pc, #148]	@ (8003b54 <USB_DeactivateEndpoint+0x324>)
 8003abe:	4323      	orrs	r3, r4
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ada:	b29c      	uxth	r4, r3
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	441a      	add	r2, r3
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b50 <USB_DeactivateEndpoint+0x320>)
 8003ae8:	4323      	orrs	r3, r4
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b04:	b29c      	uxth	r4, r3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	441a      	add	r2, r3
 8003b10:	4b11      	ldr	r3, [pc, #68]	@ (8003b58 <USB_DeactivateEndpoint+0x328>)
 8003b12:	4323      	orrs	r3, r4
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b2e:	b29c      	uxth	r4, r3
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	441a      	add	r2, r3
 8003b3a:	4b07      	ldr	r3, [pc, #28]	@ (8003b58 <USB_DeactivateEndpoint+0x328>)
 8003b3c:	4323      	orrs	r3, r4
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc90      	pop	{r4, r7}
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	ffffc080 	.word	0xffffc080
 8003b54:	ffff80c0 	.word	0xffff80c0
 8003b58:	ffff8080 	.word	0xffff8080

08003b5c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b08d      	sub	sp, #52	@ 0x34
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	785b      	ldrb	r3, [r3, #1]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	f040 8160 	bne.w	8003e30 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d909      	bls.n	8003b90 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	62bb      	str	r3, [r7, #40]	@ 0x28
      ep->xfer_len -= len;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	1ad2      	subs	r2, r2, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	619a      	str	r2, [r3, #24]
 8003b8e:	e005      	b.n	8003b9c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
      ep->xfer_len = 0U;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	7b1b      	ldrb	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d119      	bne.n	8003bd8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6959      	ldr	r1, [r3, #20]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	88da      	ldrh	r2, [r3, #6]
 8003bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fba2 	bl	80042fa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003bb6:	687c      	ldr	r4, [r7, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	441c      	add	r4, r3
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	4423      	add	r3, r4
 8003bca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003bce:	461c      	mov	r4, r3
 8003bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	8023      	strh	r3, [r4, #0]
 8003bd6:	e10f      	b.n	8003df8 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d065      	beq.n	8003cba <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003bee:	687c      	ldr	r4, [r7, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	785b      	ldrb	r3, [r3, #1]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d148      	bne.n	8003c8a <USB_EPStartXfer+0x12e>
 8003bf8:	687c      	ldr	r4, [r7, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	441c      	add	r4, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	4423      	add	r3, r4
 8003c0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c10:	461c      	mov	r4, r3
 8003c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10e      	bne.n	8003c36 <USB_EPStartXfer+0xda>
 8003c18:	8823      	ldrh	r3, [r4, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	8023      	strh	r3, [r4, #0]
 8003c24:	8823      	ldrh	r3, [r4, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	8023      	strh	r3, [r4, #0]
 8003c34:	e03d      	b.n	8003cb2 <USB_EPStartXfer+0x156>
 8003c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c38:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c3a:	d810      	bhi.n	8003c5e <USB_EPStartXfer+0x102>
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <USB_EPStartXfer+0xf6>
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	3301      	adds	r3, #1
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	029b      	lsls	r3, r3, #10
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	8023      	strh	r3, [r4, #0]
 8003c5c:	e029      	b.n	8003cb2 <USB_EPStartXfer+0x156>
 8003c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d102      	bne.n	8003c74 <USB_EPStartXfer+0x118>
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	3b01      	subs	r3, #1
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	029b      	lsls	r3, r3, #10
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	8023      	strh	r3, [r4, #0]
 8003c88:	e013      	b.n	8003cb2 <USB_EPStartXfer+0x156>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d10f      	bne.n	8003cb2 <USB_EPStartXfer+0x156>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	441c      	add	r4, r3
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	4423      	add	r3, r4
 8003ca4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	895b      	ldrh	r3, [r3, #10]
 8003cb6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003cb8:	e063      	b.n	8003d82 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d148      	bne.n	8003d54 <USB_EPStartXfer+0x1f8>
 8003cc2:	687c      	ldr	r4, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	441c      	add	r4, r3
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	4423      	add	r3, r4
 8003cd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cda:	461c      	mov	r4, r3
 8003cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10e      	bne.n	8003d00 <USB_EPStartXfer+0x1a4>
 8003ce2:	8823      	ldrh	r3, [r4, #0]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	8023      	strh	r3, [r4, #0]
 8003cee:	8823      	ldrh	r3, [r4, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	8023      	strh	r3, [r4, #0]
 8003cfe:	e03d      	b.n	8003d7c <USB_EPStartXfer+0x220>
 8003d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d02:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d04:	d810      	bhi.n	8003d28 <USB_EPStartXfer+0x1cc>
 8003d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <USB_EPStartXfer+0x1c0>
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	623b      	str	r3, [r7, #32]
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	029b      	lsls	r3, r3, #10
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	8023      	strh	r3, [r4, #0]
 8003d26:	e029      	b.n	8003d7c <USB_EPStartXfer+0x220>
 8003d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	623b      	str	r3, [r7, #32]
 8003d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <USB_EPStartXfer+0x1e2>
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	623b      	str	r3, [r7, #32]
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	029b      	lsls	r3, r3, #10
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	8023      	strh	r3, [r4, #0]
 8003d52:	e013      	b.n	8003d7c <USB_EPStartXfer+0x220>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	785b      	ldrb	r3, [r3, #1]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d10f      	bne.n	8003d7c <USB_EPStartXfer+0x220>
 8003d5c:	687c      	ldr	r4, [r7, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	441c      	add	r4, r3
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4423      	add	r3, r4
 8003d70:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d74:	461c      	mov	r4, r3
 8003d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	891b      	ldrh	r3, [r3, #8]
 8003d80:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6959      	ldr	r1, [r3, #20]
 8003d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fab4 	bl	80042fa <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	785b      	ldrb	r3, [r3, #1]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d115      	bne.n	8003dc6 <USB_EPStartXfer+0x26a>
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db0:	b29c      	uxth	r4, r3
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	441a      	add	r2, r3
 8003dbc:	4b90      	ldr	r3, [pc, #576]	@ (8004000 <USB_EPStartXfer+0x4a4>)
 8003dbe:	4323      	orrs	r3, r4
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	8013      	strh	r3, [r2, #0]
 8003dc4:	e018      	b.n	8003df8 <USB_EPStartXfer+0x29c>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d114      	bne.n	8003df8 <USB_EPStartXfer+0x29c>
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de4:	b29c      	uxth	r4, r3
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	441a      	add	r2, r3
 8003df0:	4b84      	ldr	r3, [pc, #528]	@ (8004004 <USB_EPStartXfer+0x4a8>)
 8003df2:	4323      	orrs	r3, r4
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e0e:	b29c      	uxth	r4, r3
 8003e10:	f084 0310 	eor.w	r3, r4, #16
 8003e14:	b29c      	uxth	r4, r3
 8003e16:	f084 0320 	eor.w	r3, r4, #32
 8003e1a:	b29c      	uxth	r4, r3
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	441a      	add	r2, r3
 8003e26:	4b78      	ldr	r3, [pc, #480]	@ (8004008 <USB_EPStartXfer+0x4ac>)
 8003e28:	4323      	orrs	r3, r4
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	8013      	strh	r3, [r2, #0]
 8003e2e:	e146      	b.n	80040be <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	699a      	ldr	r2, [r3, #24]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d909      	bls.n	8003e50 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28
      ep->xfer_len -= len;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e48:	1ad2      	subs	r2, r2, r3
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	619a      	str	r2, [r3, #24]
 8003e4e:	e005      	b.n	8003e5c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	62bb      	str	r3, [r7, #40]	@ 0x28
      ep->xfer_len = 0U;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	7b1b      	ldrb	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d148      	bne.n	8003ef6 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003e64:	687c      	ldr	r4, [r7, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	441c      	add	r4, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	4423      	add	r3, r4
 8003e78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e7c:	461c      	mov	r4, r3
 8003e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10e      	bne.n	8003ea2 <USB_EPStartXfer+0x346>
 8003e84:	8823      	ldrh	r3, [r4, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	8023      	strh	r3, [r4, #0]
 8003e90:	8823      	ldrh	r3, [r4, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	8023      	strh	r3, [r4, #0]
 8003ea0:	e0f2      	b.n	8004088 <USB_EPStartXfer+0x52c>
 8003ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea4:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ea6:	d810      	bhi.n	8003eca <USB_EPStartXfer+0x36e>
 8003ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <USB_EPStartXfer+0x362>
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	029b      	lsls	r3, r3, #10
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	8023      	strh	r3, [r4, #0]
 8003ec8:	e0de      	b.n	8004088 <USB_EPStartXfer+0x52c>
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <USB_EPStartXfer+0x384>
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	029b      	lsls	r3, r3, #10
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	8023      	strh	r3, [r4, #0]
 8003ef4:	e0c8      	b.n	8004088 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	785b      	ldrb	r3, [r3, #1]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d148      	bne.n	8003f90 <USB_EPStartXfer+0x434>
 8003efe:	687c      	ldr	r4, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	441c      	add	r4, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	4423      	add	r3, r4
 8003f12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f16:	461c      	mov	r4, r3
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10e      	bne.n	8003f3c <USB_EPStartXfer+0x3e0>
 8003f1e:	8823      	ldrh	r3, [r4, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	8023      	strh	r3, [r4, #0]
 8003f2a:	8823      	ldrh	r3, [r4, #0]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	8023      	strh	r3, [r4, #0]
 8003f3a:	e03d      	b.n	8003fb8 <USB_EPStartXfer+0x45c>
 8003f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f40:	d810      	bhi.n	8003f64 <USB_EPStartXfer+0x408>
 8003f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f44:	085b      	lsrs	r3, r3, #1
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <USB_EPStartXfer+0x3fc>
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	3301      	adds	r3, #1
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	029b      	lsls	r3, r3, #10
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	8023      	strh	r3, [r4, #0]
 8003f62:	e029      	b.n	8003fb8 <USB_EPStartXfer+0x45c>
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <USB_EPStartXfer+0x41e>
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	029b      	lsls	r3, r3, #10
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	8023      	strh	r3, [r4, #0]
 8003f8e:	e013      	b.n	8003fb8 <USB_EPStartXfer+0x45c>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d10f      	bne.n	8003fb8 <USB_EPStartXfer+0x45c>
 8003f98:	687c      	ldr	r4, [r7, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	441c      	add	r4, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	4423      	add	r3, r4
 8003fac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fb0:	461c      	mov	r4, r3
 8003fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	8023      	strh	r3, [r4, #0]
 8003fb8:	687c      	ldr	r4, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d14e      	bne.n	8004060 <USB_EPStartXfer+0x504>
 8003fc2:	687c      	ldr	r4, [r7, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	441c      	add	r4, r3
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	4423      	add	r3, r4
 8003fd6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003fda:	461c      	mov	r4, r3
 8003fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d114      	bne.n	800400c <USB_EPStartXfer+0x4b0>
 8003fe2:	8823      	ldrh	r3, [r4, #0]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	8023      	strh	r3, [r4, #0]
 8003fee:	8823      	ldrh	r3, [r4, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	8023      	strh	r3, [r4, #0]
 8003ffe:	e043      	b.n	8004088 <USB_EPStartXfer+0x52c>
 8004000:	ffff80c0 	.word	0xffff80c0
 8004004:	ffffc080 	.word	0xffffc080
 8004008:	ffff8080 	.word	0xffff8080
 800400c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004010:	d810      	bhi.n	8004034 <USB_EPStartXfer+0x4d8>
 8004012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004014:	085b      	lsrs	r3, r3, #1
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <USB_EPStartXfer+0x4cc>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	3301      	adds	r3, #1
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	b29b      	uxth	r3, r3
 800402c:	029b      	lsls	r3, r3, #10
 800402e:	b29b      	uxth	r3, r3
 8004030:	8023      	strh	r3, [r4, #0]
 8004032:	e029      	b.n	8004088 <USB_EPStartXfer+0x52c>
 8004034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <USB_EPStartXfer+0x4ee>
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3b01      	subs	r3, #1
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	b29b      	uxth	r3, r3
 800404e:	029b      	lsls	r3, r3, #10
 8004050:	b29b      	uxth	r3, r3
 8004052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800405a:	b29b      	uxth	r3, r3
 800405c:	8023      	strh	r3, [r4, #0]
 800405e:	e013      	b.n	8004088 <USB_EPStartXfer+0x52c>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d10f      	bne.n	8004088 <USB_EPStartXfer+0x52c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	441c      	add	r4, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	4423      	add	r3, r4
 800407a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	b29a      	uxth	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800409a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409e:	b29c      	uxth	r4, r3
 80040a0:	f484 5380 	eor.w	r3, r4, #4096	@ 0x1000
 80040a4:	b29c      	uxth	r4, r3
 80040a6:	f484 5300 	eor.w	r3, r4, #8192	@ 0x2000
 80040aa:	b29c      	uxth	r4, r3
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	441a      	add	r2, r3
 80040b6:	4b04      	ldr	r3, [pc, #16]	@ (80040c8 <USB_EPStartXfer+0x56c>)
 80040b8:	4323      	orrs	r3, r4
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3734      	adds	r7, #52	@ 0x34
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd90      	pop	{r4, r7, pc}
 80040c8:	ffff8080 	.word	0xffff8080

080040cc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040cc:	b490      	push	{r4, r7}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	785b      	ldrb	r3, [r3, #1]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d018      	beq.n	8004110 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040f4:	b29c      	uxth	r4, r3
 80040f6:	f084 0310 	eor.w	r3, r4, #16
 80040fa:	b29c      	uxth	r4, r3
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	4b11      	ldr	r3, [pc, #68]	@ (800414c <USB_EPSetStall+0x80>)
 8004108:	4323      	orrs	r3, r4
 800410a:	b29b      	uxth	r3, r3
 800410c:	8013      	strh	r3, [r2, #0]
 800410e:	e017      	b.n	8004140 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004126:	b29c      	uxth	r4, r3
 8004128:	f484 5380 	eor.w	r3, r4, #4096	@ 0x1000
 800412c:	b29c      	uxth	r4, r3
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	441a      	add	r2, r3
 8004138:	4b04      	ldr	r3, [pc, #16]	@ (800414c <USB_EPSetStall+0x80>)
 800413a:	4323      	orrs	r3, r4
 800413c:	b29b      	uxth	r3, r3
 800413e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bc90      	pop	{r4, r7}
 800414a:	4770      	bx	lr
 800414c:	ffff8080 	.word	0xffff8080

08004150 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004150:	b490      	push	{r4, r7}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	7b1b      	ldrb	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d17d      	bne.n	800425e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	785b      	ldrb	r3, [r3, #1]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d03d      	beq.n	80041e6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29c      	uxth	r4, r3
 8004178:	4623      	mov	r3, r4
 800417a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d014      	beq.n	80041ac <USB_EPClearStall+0x5c>
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004198:	b29c      	uxth	r4, r3
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	441a      	add	r2, r3
 80041a4:	4b31      	ldr	r3, [pc, #196]	@ (800426c <USB_EPClearStall+0x11c>)
 80041a6:	4323      	orrs	r3, r4
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	78db      	ldrb	r3, [r3, #3]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d054      	beq.n	800425e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041ca:	b29c      	uxth	r4, r3
 80041cc:	f084 0320 	eor.w	r3, r4, #32
 80041d0:	b29c      	uxth	r4, r3
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	441a      	add	r2, r3
 80041dc:	4b24      	ldr	r3, [pc, #144]	@ (8004270 <USB_EPClearStall+0x120>)
 80041de:	4323      	orrs	r3, r4
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	8013      	strh	r3, [r2, #0]
 80041e4:	e03b      	b.n	800425e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29c      	uxth	r4, r3
 80041f4:	4623      	mov	r3, r4
 80041f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d014      	beq.n	8004228 <USB_EPClearStall+0xd8>
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004214:	b29c      	uxth	r4, r3
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	4b14      	ldr	r3, [pc, #80]	@ (8004274 <USB_EPClearStall+0x124>)
 8004222:	4323      	orrs	r3, r4
 8004224:	b29b      	uxth	r3, r3
 8004226:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800423a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423e:	b29c      	uxth	r4, r3
 8004240:	f484 5380 	eor.w	r3, r4, #4096	@ 0x1000
 8004244:	b29c      	uxth	r4, r3
 8004246:	f484 5300 	eor.w	r3, r4, #8192	@ 0x2000
 800424a:	b29c      	uxth	r4, r3
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	441a      	add	r2, r3
 8004256:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <USB_EPClearStall+0x120>)
 8004258:	4323      	orrs	r3, r4
 800425a:	b29b      	uxth	r3, r3
 800425c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bc90      	pop	{r4, r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	ffff80c0 	.word	0xffff80c0
 8004270:	ffff8080 	.word	0xffff8080
 8004274:	ffffc080 	.word	0xffffc080

08004278 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2280      	movs	r2, #128	@ 0x80
 800428e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr

080042b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80042d8:	68fb      	ldr	r3, [r7, #12]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr

080042fa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b08d      	sub	sp, #52	@ 0x34
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	4611      	mov	r1, r2
 8004306:	461a      	mov	r2, r3
 8004308:	460b      	mov	r3, r1
 800430a:	80fb      	strh	r3, [r7, #6]
 800430c:	4613      	mov	r3, r2
 800430e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004310:	88bb      	ldrh	r3, [r7, #4]
 8004312:	3301      	adds	r3, #1
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	005a      	lsls	r2, r3, #1
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004332:	e01d      	b.n	8004370 <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	3301      	adds	r3, #1
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	b29b      	uxth	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	b29a      	uxth	r2, r3
 8004354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004356:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435a:	3302      	adds	r3, #2
 800435c:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004360:	3302      	adds	r3, #2
 8004362:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 8004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004366:	3301      	adds	r3, #1
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800436a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436c:	3b01      	subs	r3, #1
 800436e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1de      	bne.n	8004334 <USB_WritePMA+0x3a>
  }
}
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	3734      	adds	r7, #52	@ 0x34
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr

08004382 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004382:	b480      	push	{r7}
 8004384:	b08b      	sub	sp, #44	@ 0x2c
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	4611      	mov	r1, r2
 800438e:	461a      	mov	r2, r3
 8004390:	460b      	mov	r3, r1
 8004392:	80fb      	strh	r3, [r7, #6]
 8004394:	4613      	mov	r3, r2
 8004396:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004398:	88bb      	ldrh	r3, [r7, #4]
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	b29b      	uxth	r3, r3
 800439e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	005a      	lsls	r2, r3, #1
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043b4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ba:	e01b      	b.n	80043f4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	3302      	adds	r3, #2
 80043c8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3301      	adds	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	3301      	adds	r3, #1
 80043e6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	3302      	adds	r3, #2
 80043ec:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	3b01      	subs	r3, #1
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e0      	bne.n	80043bc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80043fa:	88bb      	ldrh	r3, [r7, #4]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d007      	beq.n	8004416 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	b2da      	uxtb	r2, r3
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	701a      	strb	r2, [r3, #0]
  }
}
 8004416:	bf00      	nop
 8004418:	372c      	adds	r7, #44	@ 0x2c
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	7c1b      	ldrb	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d115      	bne.n	8004464 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800443c:	2202      	movs	r2, #2
 800443e:	2181      	movs	r1, #129	@ 0x81
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f001 fe96 	bl	8006172 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800444c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004450:	2202      	movs	r2, #2
 8004452:	2101      	movs	r1, #1
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f001 fe8c 	bl	8006172 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8004462:	e012      	b.n	800448a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004464:	2340      	movs	r3, #64	@ 0x40
 8004466:	2202      	movs	r2, #2
 8004468:	2181      	movs	r1, #129	@ 0x81
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f001 fe81 	bl	8006172 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004476:	2340      	movs	r3, #64	@ 0x40
 8004478:	2202      	movs	r2, #2
 800447a:	2101      	movs	r1, #1
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f001 fe78 	bl	8006172 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800448a:	2308      	movs	r3, #8
 800448c:	2203      	movs	r2, #3
 800448e:	2182      	movs	r1, #130	@ 0x82
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f001 fe6e 	bl	8006172 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800449c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80044a0:	f001 ff88 	bl	80063b4 <USBD_static_malloc>
 80044a4:	4602      	mov	r2, r0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80044b6:	2301      	movs	r3, #1
 80044b8:	73fb      	strb	r3, [r7, #15]
 80044ba:	e026      	b.n	800450a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80044c2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	7c1b      	ldrb	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80044ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044f0:	2101      	movs	r1, #1
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f001 ff27 	bl	8006346 <USBD_LL_PrepareReceive>
 80044f8:	e007      	b.n	800450a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004500:	2340      	movs	r3, #64	@ 0x40
 8004502:	2101      	movs	r1, #1
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f001 ff1e 	bl	8006346 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800450a:	7bfb      	ldrb	r3, [r7, #15]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004524:	2181      	movs	r1, #129	@ 0x81
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f001 fe49 	bl	80061be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004532:	2101      	movs	r1, #1
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f001 fe42 	bl	80061be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004542:	2182      	movs	r1, #130	@ 0x82
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f001 fe3a 	bl	80061be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00e      	beq.n	8004578 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800456a:	4618      	mov	r0, r3
 800456c:	f001 ff2e 	bl	80063cc <USBD_static_free>
    pdev->pClassData = NULL;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8004578:	7bfb      	ldrb	r3, [r7, #15]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b086      	sub	sp, #24
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004592:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d039      	beq.n	8004620 <USBD_CDC_Setup+0x9e>
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d17f      	bne.n	80046b0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	88db      	ldrh	r3, [r3, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d029      	beq.n	800460c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	da11      	bge.n	80045e6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80045ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	88d2      	ldrh	r2, [r2, #6]
 80045d4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80045d6:	6939      	ldr	r1, [r7, #16]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	88db      	ldrh	r3, [r3, #6]
 80045dc:	461a      	mov	r2, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f001 fa02 	bl	80059e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80045e4:	e06b      	b.n	80046be <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	785a      	ldrb	r2, [r3, #1]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	88db      	ldrh	r3, [r3, #6]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80045fc:	6939      	ldr	r1, [r7, #16]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	88db      	ldrh	r3, [r3, #6]
 8004602:	461a      	mov	r2, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f001 fa1d 	bl	8005a44 <USBD_CtlPrepareRx>
      break;
 800460a:	e058      	b.n	80046be <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	7850      	ldrb	r0, [r2, #1]
 8004618:	2200      	movs	r2, #0
 800461a:	6839      	ldr	r1, [r7, #0]
 800461c:	4798      	blx	r3
      break;
 800461e:	e04e      	b.n	80046be <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	785b      	ldrb	r3, [r3, #1]
 8004624:	2b0b      	cmp	r3, #11
 8004626:	d02e      	beq.n	8004686 <USBD_CDC_Setup+0x104>
 8004628:	2b0b      	cmp	r3, #11
 800462a:	dc38      	bgt.n	800469e <USBD_CDC_Setup+0x11c>
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <USBD_CDC_Setup+0xb4>
 8004630:	2b0a      	cmp	r3, #10
 8004632:	d014      	beq.n	800465e <USBD_CDC_Setup+0xdc>
 8004634:	e033      	b.n	800469e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800463c:	2b03      	cmp	r3, #3
 800463e:	d107      	bne.n	8004650 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	2202      	movs	r2, #2
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f001 f9cd 	bl	80059e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800464e:	e02e      	b.n	80046ae <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f001 f95e 	bl	8005914 <USBD_CtlError>
            ret = USBD_FAIL;
 8004658:	2302      	movs	r3, #2
 800465a:	75fb      	strb	r3, [r7, #23]
          break;
 800465c:	e027      	b.n	80046ae <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004664:	2b03      	cmp	r3, #3
 8004666:	d107      	bne.n	8004678 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004668:	f107 030f 	add.w	r3, r7, #15
 800466c:	2201      	movs	r2, #1
 800466e:	4619      	mov	r1, r3
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f001 f9b9 	bl	80059e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004676:	e01a      	b.n	80046ae <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f001 f94a 	bl	8005914 <USBD_CtlError>
            ret = USBD_FAIL;
 8004680:	2302      	movs	r3, #2
 8004682:	75fb      	strb	r3, [r7, #23]
          break;
 8004684:	e013      	b.n	80046ae <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800468c:	2b03      	cmp	r3, #3
 800468e:	d00d      	beq.n	80046ac <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8004690:	6839      	ldr	r1, [r7, #0]
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f001 f93e 	bl	8005914 <USBD_CtlError>
            ret = USBD_FAIL;
 8004698:	2302      	movs	r3, #2
 800469a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800469c:	e006      	b.n	80046ac <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800469e:	6839      	ldr	r1, [r7, #0]
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f001 f937 	bl	8005914 <USBD_CtlError>
          ret = USBD_FAIL;
 80046a6:	2302      	movs	r3, #2
 80046a8:	75fb      	strb	r3, [r7, #23]
          break;
 80046aa:	e000      	b.n	80046ae <USBD_CDC_Setup+0x12c>
          break;
 80046ac:	bf00      	nop
      }
      break;
 80046ae:	e006      	b.n	80046be <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f001 f92e 	bl	8005914 <USBD_CtlError>
      ret = USBD_FAIL;
 80046b8:	2302      	movs	r3, #2
 80046ba:	75fb      	strb	r3, [r7, #23]
      break;
 80046bc:	bf00      	nop
  }

  return ret;
 80046be:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80046da:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80046e2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d037      	beq.n	800475e <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80046ee:	78fa      	ldrb	r2, [r7, #3]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	331c      	adds	r3, #28
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d026      	beq.n	8004752 <USBD_CDC_DataIn+0x8a>
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	331c      	adds	r3, #28
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	0152      	lsls	r2, r2, #5
 800471c:	440a      	add	r2, r1
 800471e:	3238      	adds	r2, #56	@ 0x38
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	fbb3 f1f2 	udiv	r1, r3, r2
 8004726:	fb01 f202 	mul.w	r2, r1, r2
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d110      	bne.n	8004752 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	331c      	adds	r3, #28
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004744:	78f9      	ldrb	r1, [r7, #3]
 8004746:	2300      	movs	r3, #0
 8004748:	2200      	movs	r2, #0
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f001 fdd8 	bl	8006300 <USBD_LL_Transmit>
 8004750:	e003      	b.n	800475a <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e000      	b.n	8004760 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800475e:	2302      	movs	r3, #2
  }
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800477a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 fe03 	bl	800638c <USBD_LL_GetRxDataSize>
 8004786:	4602      	mov	r2, r0
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00d      	beq.n	80047b4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80047ac:	4611      	mov	r1, r2
 80047ae:	4798      	blx	r3

    return USBD_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e000      	b.n	80047b6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80047b4:	2302      	movs	r3, #2
  }
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80047cc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d014      	beq.n	8004802 <USBD_CDC_EP0_RxReady+0x44>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80047de:	2bff      	cmp	r3, #255	@ 0xff
 80047e0:	d00f      	beq.n	8004802 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80047f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80047f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	22ff      	movs	r2, #255	@ 0xff
 80047fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2243      	movs	r2, #67	@ 0x43
 8004818:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800481a:	4b03      	ldr	r3, [pc, #12]	@ (8004828 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	200000ac 	.word	0x200000ac

0800482c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2243      	movs	r2, #67	@ 0x43
 8004838:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800483a:	4b03      	ldr	r3, [pc, #12]	@ (8004848 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000068 	.word	0x20000068

0800484c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2243      	movs	r2, #67	@ 0x43
 8004858:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800485a:	4b03      	ldr	r3, [pc, #12]	@ (8004868 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	200000f0 	.word	0x200000f0

0800486c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	220a      	movs	r2, #10
 8004878:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800487a:	4b03      	ldr	r3, [pc, #12]	@ (8004888 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000024 	.word	0x20000024

0800488c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004896:	2302      	movs	r3, #2
 8004898:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80048cc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80048d6:	88fa      	ldrh	r2, [r7, #6]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80048fa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr

08004910 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800491e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01c      	beq.n	8004964 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004930:	2b00      	cmp	r3, #0
 8004932:	d115      	bne.n	8004960 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004952:	b29b      	uxth	r3, r3
 8004954:	2181      	movs	r1, #129	@ 0x81
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f001 fcd2 	bl	8006300 <USBD_LL_Transmit>

      return USBD_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e002      	b.n	8004966 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004964:	2302      	movs	r3, #2
  }
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800497c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d017      	beq.n	80049b8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	7c1b      	ldrb	r3, [r3, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004996:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800499a:	2101      	movs	r1, #1
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f001 fcd2 	bl	8006346 <USBD_LL_PrepareReceive>
 80049a2:	e007      	b.n	80049b4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80049aa:	2340      	movs	r3, #64	@ 0x40
 80049ac:	2101      	movs	r1, #1
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f001 fcc9 	bl	8006346 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	4613      	mov	r3, r2
 80049ce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80049d6:	2302      	movs	r3, #2
 80049d8:	e01a      	b.n	8004a10 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	79fa      	ldrb	r2, [r7, #7]
 8004a06:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f001 fb3d 	bl	8006088 <USBD_LL_Init>

  return USBD_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d006      	beq.n	8004a3a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]
 8004a38:	e001      	b.n	8004a3e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f001 fb72 	bl	800613c <USBD_LL_Start>

  return USBD_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr

08004a76 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b084      	sub	sp, #16
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004a82:	2302      	movs	r3, #2
 8004a84:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00c      	beq.n	8004aaa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	4611      	mov	r1, r2
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	4798      	blx	r3

  return USBD_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004aea:	6839      	ldr	r1, [r7, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fed8 	bl	80058a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004b00:	461a      	mov	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d016      	beq.n	8004b44 <USBD_LL_SetupStage+0x6a>
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d81c      	bhi.n	8004b54 <USBD_LL_SetupStage+0x7a>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <USBD_LL_SetupStage+0x4a>
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d008      	beq.n	8004b34 <USBD_LL_SetupStage+0x5a>
 8004b22:	e017      	b.n	8004b54 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f9cb 	bl	8004ec8 <USBD_StdDevReq>
      break;
 8004b32:	e01a      	b.n	8004b6a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fa2d 	bl	8004f9c <USBD_StdItfReq>
      break;
 8004b42:	e012      	b.n	8004b6a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fa6d 	bl	800502c <USBD_StdEPReq>
      break;
 8004b52:	e00a      	b.n	8004b6a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004b5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f001 fb4a 	bl	80061fc <USBD_LL_StallEP>
      break;
 8004b68:	bf00      	nop
  }

  return USBD_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004b82:	7afb      	ldrb	r3, [r7, #11]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d14b      	bne.n	8004c20 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004b8e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d134      	bne.n	8004c04 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d919      	bls.n	8004bda <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d203      	bcs.n	8004bc8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	e002      	b.n	8004bce <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 ff54 	bl	8005a80 <USBD_CtlContinueRx>
 8004bd8:	e038      	b.n	8004c4c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d105      	bne.n	8004bfc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 ff51 	bl	8005aa4 <USBD_CtlSendStatus>
 8004c02:	e023      	b.n	8004c4c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004c0a:	2b05      	cmp	r3, #5
 8004c0c:	d11e      	bne.n	8004c4c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004c16:	2100      	movs	r1, #0
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f001 faef 	bl	80061fc <USBD_LL_StallEP>
 8004c1e:	e015      	b.n	8004c4c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00d      	beq.n	8004c48 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d108      	bne.n	8004c48 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	7afa      	ldrb	r2, [r7, #11]
 8004c40:	4611      	mov	r1, r2
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	4798      	blx	r3
 8004c46:	e001      	b.n	8004c4c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e000      	b.n	8004c4e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b086      	sub	sp, #24
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004c64:	7afb      	ldrb	r3, [r7, #11]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d17f      	bne.n	8004d6a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3314      	adds	r3, #20
 8004c6e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d15c      	bne.n	8004d34 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d915      	bls.n	8004cb2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	1ad2      	subs	r2, r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 febe 	bl	8005a20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2100      	movs	r1, #0
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f001 fb4b 	bl	8006346 <USBD_LL_PrepareReceive>
 8004cb0:	e04e      	b.n	8004d50 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	6912      	ldr	r2, [r2, #16]
 8004cba:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cbe:	fb01 f202 	mul.w	r2, r1, r2
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d11c      	bne.n	8004d02 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d316      	bcc.n	8004d02 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d20f      	bcs.n	8004d02 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fe9a 	bl	8005a20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f001 fb23 	bl	8006346 <USBD_LL_PrepareReceive>
 8004d00:	e026      	b.n	8004d50 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d105      	bne.n	8004d24 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004d24:	2180      	movs	r1, #128	@ 0x80
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f001 fa68 	bl	80061fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fecc 	bl	8005aca <USBD_CtlReceiveStatus>
 8004d32:	e00d      	b.n	8004d50 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d004      	beq.n	8004d48 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004d48:	2180      	movs	r1, #128	@ 0x80
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f001 fa56 	bl	80061fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d11d      	bne.n	8004d96 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7ff fe81 	bl	8004a62 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004d68:	e015      	b.n	8004d96 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00d      	beq.n	8004d92 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d108      	bne.n	8004d92 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	7afa      	ldrb	r2, [r7, #11]
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	4798      	blx	r3
 8004d90:	e001      	b.n	8004d96 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004d92:	2302      	movs	r3, #2
 8004d94:	e000      	b.n	8004d98 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004da8:	2340      	movs	r3, #64	@ 0x40
 8004daa:	2200      	movs	r2, #0
 8004dac:	2100      	movs	r1, #0
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f001 f9df 	bl	8006172 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2240      	movs	r2, #64	@ 0x40
 8004dc0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dc4:	2340      	movs	r3, #64	@ 0x40
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2180      	movs	r1, #128	@ 0x80
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 f9d1 	bl	8006172 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2240      	movs	r2, #64	@ 0x40
 8004dda:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d009      	beq.n	8004e18 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6852      	ldr	r2, [r2, #4]
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	4611      	mov	r1, r2
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
  }

  return USBD_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	78fa      	ldrb	r2, [r7, #3]
 8004e32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2204      	movs	r2, #4
 8004e58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr

08004e68 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d105      	bne.n	8004e86 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr

08004e92 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d10b      	bne.n	8004ebc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004ede:	2b40      	cmp	r3, #64	@ 0x40
 8004ee0:	d005      	beq.n	8004eee <USBD_StdDevReq+0x26>
 8004ee2:	2b40      	cmp	r3, #64	@ 0x40
 8004ee4:	d84f      	bhi.n	8004f86 <USBD_StdDevReq+0xbe>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <USBD_StdDevReq+0x36>
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d14b      	bne.n	8004f86 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
      break;
 8004efc:	e048      	b.n	8004f90 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	2b09      	cmp	r3, #9
 8004f04:	d839      	bhi.n	8004f7a <USBD_StdDevReq+0xb2>
 8004f06:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <USBD_StdDevReq+0x44>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f5d 	.word	0x08004f5d
 8004f10:	08004f71 	.word	0x08004f71
 8004f14:	08004f7b 	.word	0x08004f7b
 8004f18:	08004f67 	.word	0x08004f67
 8004f1c:	08004f7b 	.word	0x08004f7b
 8004f20:	08004f3f 	.word	0x08004f3f
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f7b 	.word	0x08004f7b
 8004f2c:	08004f53 	.word	0x08004f53
 8004f30:	08004f49 	.word	0x08004f49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004f34:	6839      	ldr	r1, [r7, #0]
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f9dc 	bl	80052f4 <USBD_GetDescriptor>
          break;
 8004f3c:	e022      	b.n	8004f84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004f3e:	6839      	ldr	r1, [r7, #0]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fb3f 	bl	80055c4 <USBD_SetAddress>
          break;
 8004f46:	e01d      	b.n	8004f84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fb7e 	bl	800564c <USBD_SetConfig>
          break;
 8004f50:	e018      	b.n	8004f84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004f52:	6839      	ldr	r1, [r7, #0]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fc07 	bl	8005768 <USBD_GetConfig>
          break;
 8004f5a:	e013      	b.n	8004f84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004f5c:	6839      	ldr	r1, [r7, #0]
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fc37 	bl	80057d2 <USBD_GetStatus>
          break;
 8004f64:	e00e      	b.n	8004f84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fc65 	bl	8005838 <USBD_SetFeature>
          break;
 8004f6e:	e009      	b.n	8004f84 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004f70:	6839      	ldr	r1, [r7, #0]
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fc74 	bl	8005860 <USBD_ClrFeature>
          break;
 8004f78:	e004      	b.n	8004f84 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fcc9 	bl	8005914 <USBD_CtlError>
          break;
 8004f82:	bf00      	nop
      }
      break;
 8004f84:	e004      	b.n	8004f90 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fcc3 	bl	8005914 <USBD_CtlError>
      break;
 8004f8e:	bf00      	nop
  }

  return ret;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop

08004f9c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004fb2:	2b40      	cmp	r3, #64	@ 0x40
 8004fb4:	d005      	beq.n	8004fc2 <USBD_StdItfReq+0x26>
 8004fb6:	2b40      	cmp	r3, #64	@ 0x40
 8004fb8:	d82e      	bhi.n	8005018 <USBD_StdItfReq+0x7c>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <USBD_StdItfReq+0x26>
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d12a      	bne.n	8005018 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d81d      	bhi.n	800500a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	889b      	ldrh	r3, [r3, #4]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d813      	bhi.n	8005000 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	6839      	ldr	r1, [r7, #0]
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	4798      	blx	r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	88db      	ldrh	r3, [r3, #6]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d110      	bne.n	8005014 <USBD_StdItfReq+0x78>
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10d      	bne.n	8005014 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fd53 	bl	8005aa4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004ffe:	e009      	b.n	8005014 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fc86 	bl	8005914 <USBD_CtlError>
          break;
 8005008:	e004      	b.n	8005014 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800500a:	6839      	ldr	r1, [r7, #0]
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fc81 	bl	8005914 <USBD_CtlError>
          break;
 8005012:	e000      	b.n	8005016 <USBD_StdItfReq+0x7a>
          break;
 8005014:	bf00      	nop
      }
      break;
 8005016:	e004      	b.n	8005022 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fc7a 	bl	8005914 <USBD_CtlError>
      break;
 8005020:	bf00      	nop
  }

  return USBD_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	889b      	ldrh	r3, [r3, #4]
 800503e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005048:	2b40      	cmp	r3, #64	@ 0x40
 800504a:	d007      	beq.n	800505c <USBD_StdEPReq+0x30>
 800504c:	2b40      	cmp	r3, #64	@ 0x40
 800504e:	f200 8146 	bhi.w	80052de <USBD_StdEPReq+0x2b2>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <USBD_StdEPReq+0x40>
 8005056:	2b20      	cmp	r3, #32
 8005058:	f040 8141 	bne.w	80052de <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
      break;
 800506a:	e13d      	b.n	80052e8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005074:	2b20      	cmp	r3, #32
 8005076:	d10a      	bne.n	800508e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
 8005086:	4603      	mov	r3, r0
 8005088:	73fb      	strb	r3, [r7, #15]

        return ret;
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	e12d      	b.n	80052ea <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b03      	cmp	r3, #3
 8005094:	d007      	beq.n	80050a6 <USBD_StdEPReq+0x7a>
 8005096:	2b03      	cmp	r3, #3
 8005098:	f300 811b 	bgt.w	80052d2 <USBD_StdEPReq+0x2a6>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d072      	beq.n	8005186 <USBD_StdEPReq+0x15a>
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d03a      	beq.n	800511a <USBD_StdEPReq+0xee>
 80050a4:	e115      	b.n	80052d2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d002      	beq.n	80050b6 <USBD_StdEPReq+0x8a>
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d015      	beq.n	80050e0 <USBD_StdEPReq+0xb4>
 80050b4:	e02b      	b.n	800510e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050b6:	7bbb      	ldrb	r3, [r7, #14]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00c      	beq.n	80050d6 <USBD_StdEPReq+0xaa>
 80050bc:	7bbb      	ldrb	r3, [r7, #14]
 80050be:	2b80      	cmp	r3, #128	@ 0x80
 80050c0:	d009      	beq.n	80050d6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80050c2:	7bbb      	ldrb	r3, [r7, #14]
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f001 f898 	bl	80061fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80050cc:	2180      	movs	r1, #128	@ 0x80
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f001 f894 	bl	80061fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80050d4:	e020      	b.n	8005118 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80050d6:	6839      	ldr	r1, [r7, #0]
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fc1b 	bl	8005914 <USBD_CtlError>
              break;
 80050de:	e01b      	b.n	8005118 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	885b      	ldrh	r3, [r3, #2]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10e      	bne.n	8005106 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80050e8:	7bbb      	ldrb	r3, [r7, #14]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <USBD_StdEPReq+0xda>
 80050ee:	7bbb      	ldrb	r3, [r7, #14]
 80050f0:	2b80      	cmp	r3, #128	@ 0x80
 80050f2:	d008      	beq.n	8005106 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	88db      	ldrh	r3, [r3, #6]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80050fc:	7bbb      	ldrb	r3, [r7, #14]
 80050fe:	4619      	mov	r1, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f001 f87b 	bl	80061fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fccc 	bl	8005aa4 <USBD_CtlSendStatus>

              break;
 800510c:	e004      	b.n	8005118 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fbff 	bl	8005914 <USBD_CtlError>
              break;
 8005116:	bf00      	nop
          }
          break;
 8005118:	e0e0      	b.n	80052dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005120:	2b02      	cmp	r3, #2
 8005122:	d002      	beq.n	800512a <USBD_StdEPReq+0xfe>
 8005124:	2b03      	cmp	r3, #3
 8005126:	d015      	beq.n	8005154 <USBD_StdEPReq+0x128>
 8005128:	e026      	b.n	8005178 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800512a:	7bbb      	ldrb	r3, [r7, #14]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00c      	beq.n	800514a <USBD_StdEPReq+0x11e>
 8005130:	7bbb      	ldrb	r3, [r7, #14]
 8005132:	2b80      	cmp	r3, #128	@ 0x80
 8005134:	d009      	beq.n	800514a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005136:	7bbb      	ldrb	r3, [r7, #14]
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 f85e 	bl	80061fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005140:	2180      	movs	r1, #128	@ 0x80
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 f85a 	bl	80061fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005148:	e01c      	b.n	8005184 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800514a:	6839      	ldr	r1, [r7, #0]
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fbe1 	bl	8005914 <USBD_CtlError>
              break;
 8005152:	e017      	b.n	8005184 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	885b      	ldrh	r3, [r3, #2]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d112      	bne.n	8005182 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800515c:	7bbb      	ldrb	r3, [r7, #14]
 800515e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005162:	2b00      	cmp	r3, #0
 8005164:	d004      	beq.n	8005170 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005166:	7bbb      	ldrb	r3, [r7, #14]
 8005168:	4619      	mov	r1, r3
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f001 f865 	bl	800623a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fc97 	bl	8005aa4 <USBD_CtlSendStatus>
              }
              break;
 8005176:	e004      	b.n	8005182 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fbca 	bl	8005914 <USBD_CtlError>
              break;
 8005180:	e000      	b.n	8005184 <USBD_StdEPReq+0x158>
              break;
 8005182:	bf00      	nop
          }
          break;
 8005184:	e0aa      	b.n	80052dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800518c:	2b02      	cmp	r3, #2
 800518e:	d002      	beq.n	8005196 <USBD_StdEPReq+0x16a>
 8005190:	2b03      	cmp	r3, #3
 8005192:	d032      	beq.n	80051fa <USBD_StdEPReq+0x1ce>
 8005194:	e097      	b.n	80052c6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005196:	7bbb      	ldrb	r3, [r7, #14]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <USBD_StdEPReq+0x180>
 800519c:	7bbb      	ldrb	r3, [r7, #14]
 800519e:	2b80      	cmp	r3, #128	@ 0x80
 80051a0:	d004      	beq.n	80051ac <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fbb5 	bl	8005914 <USBD_CtlError>
                break;
 80051aa:	e091      	b.n	80052d0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	da0b      	bge.n	80051cc <USBD_StdEPReq+0x1a0>
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	3310      	adds	r3, #16
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	4413      	add	r3, r2
 80051c8:	3304      	adds	r3, #4
 80051ca:	e00b      	b.n	80051e4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80051cc:	7bbb      	ldrb	r3, [r7, #14]
 80051ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4413      	add	r3, r2
 80051e2:	3304      	adds	r3, #4
 80051e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2202      	movs	r2, #2
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fbf8 	bl	80059e8 <USBD_CtlSendData>
              break;
 80051f8:	e06a      	b.n	80052d0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80051fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	da11      	bge.n	8005226 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005202:	7bbb      	ldrb	r3, [r7, #14]
 8005204:	f003 020f 	and.w	r2, r3, #15
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	4613      	mov	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	440b      	add	r3, r1
 8005214:	3318      	adds	r3, #24
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d117      	bne.n	800524c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800521c:	6839      	ldr	r1, [r7, #0]
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fb78 	bl	8005914 <USBD_CtlError>
                  break;
 8005224:	e054      	b.n	80052d0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005226:	7bbb      	ldrb	r3, [r7, #14]
 8005228:	f003 020f 	and.w	r2, r3, #15
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d104      	bne.n	800524c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005242:	6839      	ldr	r1, [r7, #0]
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fb65 	bl	8005914 <USBD_CtlError>
                  break;
 800524a:	e041      	b.n	80052d0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800524c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005250:	2b00      	cmp	r3, #0
 8005252:	da0b      	bge.n	800526c <USBD_StdEPReq+0x240>
 8005254:	7bbb      	ldrb	r3, [r7, #14]
 8005256:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	3310      	adds	r3, #16
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	3304      	adds	r3, #4
 800526a:	e00b      	b.n	8005284 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800526c:	7bbb      	ldrb	r3, [r7, #14]
 800526e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4413      	add	r3, r2
 8005282:	3304      	adds	r3, #4
 8005284:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005286:	7bbb      	ldrb	r3, [r7, #14]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <USBD_StdEPReq+0x266>
 800528c:	7bbb      	ldrb	r3, [r7, #14]
 800528e:	2b80      	cmp	r3, #128	@ 0x80
 8005290:	d103      	bne.n	800529a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	e00e      	b.n	80052b8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800529a:	7bbb      	ldrb	r3, [r7, #14]
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 ffea 	bl	8006278 <USBD_LL_IsStallEP>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	e002      	b.n	80052b8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2202      	movs	r2, #2
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fb92 	bl	80059e8 <USBD_CtlSendData>
              break;
 80052c4:	e004      	b.n	80052d0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80052c6:	6839      	ldr	r1, [r7, #0]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fb23 	bl	8005914 <USBD_CtlError>
              break;
 80052ce:	bf00      	nop
          }
          break;
 80052d0:	e004      	b.n	80052dc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80052d2:	6839      	ldr	r1, [r7, #0]
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fb1d 	bl	8005914 <USBD_CtlError>
          break;
 80052da:	bf00      	nop
      }
      break;
 80052dc:	e004      	b.n	80052e8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fb17 	bl	8005914 <USBD_CtlError>
      break;
 80052e6:	bf00      	nop
  }

  return ret;
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	885b      	ldrh	r3, [r3, #2]
 800530e:	0a1b      	lsrs	r3, r3, #8
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	2b06      	cmp	r3, #6
 8005316:	f200 8128 	bhi.w	800556a <USBD_GetDescriptor+0x276>
 800531a:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <USBD_GetDescriptor+0x2c>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	0800533d 	.word	0x0800533d
 8005324:	08005355 	.word	0x08005355
 8005328:	08005395 	.word	0x08005395
 800532c:	0800556b 	.word	0x0800556b
 8005330:	0800556b 	.word	0x0800556b
 8005334:	0800550b 	.word	0x0800550b
 8005338:	08005537 	.word	0x08005537
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	7c12      	ldrb	r2, [r2, #16]
 8005348:	f107 0108 	add.w	r1, r7, #8
 800534c:	4610      	mov	r0, r2
 800534e:	4798      	blx	r3
 8005350:	60f8      	str	r0, [r7, #12]
      break;
 8005352:	e112      	b.n	800557a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	7c1b      	ldrb	r3, [r3, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10d      	bne.n	8005378 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005364:	f107 0208 	add.w	r2, r7, #8
 8005368:	4610      	mov	r0, r2
 800536a:	4798      	blx	r3
 800536c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3301      	adds	r3, #1
 8005372:	2202      	movs	r2, #2
 8005374:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005376:	e100      	b.n	800557a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800537e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005380:	f107 0208 	add.w	r2, r7, #8
 8005384:	4610      	mov	r0, r2
 8005386:	4798      	blx	r3
 8005388:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3301      	adds	r3, #1
 800538e:	2202      	movs	r2, #2
 8005390:	701a      	strb	r2, [r3, #0]
      break;
 8005392:	e0f2      	b.n	800557a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	885b      	ldrh	r3, [r3, #2]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b05      	cmp	r3, #5
 800539c:	f200 80ac 	bhi.w	80054f8 <USBD_GetDescriptor+0x204>
 80053a0:	a201      	add	r2, pc, #4	@ (adr r2, 80053a8 <USBD_GetDescriptor+0xb4>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	080053c1 	.word	0x080053c1
 80053ac:	080053f5 	.word	0x080053f5
 80053b0:	08005429 	.word	0x08005429
 80053b4:	0800545d 	.word	0x0800545d
 80053b8:	08005491 	.word	0x08005491
 80053bc:	080054c5 	.word	0x080054c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00b      	beq.n	80053e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	7c12      	ldrb	r2, [r2, #16]
 80053d8:	f107 0108 	add.w	r1, r7, #8
 80053dc:	4610      	mov	r0, r2
 80053de:	4798      	blx	r3
 80053e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053e2:	e091      	b.n	8005508 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fa94 	bl	8005914 <USBD_CtlError>
            err++;
 80053ec:	7afb      	ldrb	r3, [r7, #11]
 80053ee:	3301      	adds	r3, #1
 80053f0:	72fb      	strb	r3, [r7, #11]
          break;
 80053f2:	e089      	b.n	8005508 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	7c12      	ldrb	r2, [r2, #16]
 800540c:	f107 0108 	add.w	r1, r7, #8
 8005410:	4610      	mov	r0, r2
 8005412:	4798      	blx	r3
 8005414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005416:	e077      	b.n	8005508 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fa7a 	bl	8005914 <USBD_CtlError>
            err++;
 8005420:	7afb      	ldrb	r3, [r7, #11]
 8005422:	3301      	adds	r3, #1
 8005424:	72fb      	strb	r3, [r7, #11]
          break;
 8005426:	e06f      	b.n	8005508 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	7c12      	ldrb	r2, [r2, #16]
 8005440:	f107 0108 	add.w	r1, r7, #8
 8005444:	4610      	mov	r0, r2
 8005446:	4798      	blx	r3
 8005448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800544a:	e05d      	b.n	8005508 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800544c:	6839      	ldr	r1, [r7, #0]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fa60 	bl	8005914 <USBD_CtlError>
            err++;
 8005454:	7afb      	ldrb	r3, [r7, #11]
 8005456:	3301      	adds	r3, #1
 8005458:	72fb      	strb	r3, [r7, #11]
          break;
 800545a:	e055      	b.n	8005508 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00b      	beq.n	8005480 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	7c12      	ldrb	r2, [r2, #16]
 8005474:	f107 0108 	add.w	r1, r7, #8
 8005478:	4610      	mov	r0, r2
 800547a:	4798      	blx	r3
 800547c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800547e:	e043      	b.n	8005508 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa46 	bl	8005914 <USBD_CtlError>
            err++;
 8005488:	7afb      	ldrb	r3, [r7, #11]
 800548a:	3301      	adds	r3, #1
 800548c:	72fb      	strb	r3, [r7, #11]
          break;
 800548e:	e03b      	b.n	8005508 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	7c12      	ldrb	r2, [r2, #16]
 80054a8:	f107 0108 	add.w	r1, r7, #8
 80054ac:	4610      	mov	r0, r2
 80054ae:	4798      	blx	r3
 80054b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054b2:	e029      	b.n	8005508 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa2c 	bl	8005914 <USBD_CtlError>
            err++;
 80054bc:	7afb      	ldrb	r3, [r7, #11]
 80054be:	3301      	adds	r3, #1
 80054c0:	72fb      	strb	r3, [r7, #11]
          break;
 80054c2:	e021      	b.n	8005508 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	7c12      	ldrb	r2, [r2, #16]
 80054dc:	f107 0108 	add.w	r1, r7, #8
 80054e0:	4610      	mov	r0, r2
 80054e2:	4798      	blx	r3
 80054e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054e6:	e00f      	b.n	8005508 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa12 	bl	8005914 <USBD_CtlError>
            err++;
 80054f0:	7afb      	ldrb	r3, [r7, #11]
 80054f2:	3301      	adds	r3, #1
 80054f4:	72fb      	strb	r3, [r7, #11]
          break;
 80054f6:	e007      	b.n	8005508 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa0a 	bl	8005914 <USBD_CtlError>
          err++;
 8005500:	7afb      	ldrb	r3, [r7, #11]
 8005502:	3301      	adds	r3, #1
 8005504:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005506:	e038      	b.n	800557a <USBD_GetDescriptor+0x286>
 8005508:	e037      	b.n	800557a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	7c1b      	ldrb	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800551a:	f107 0208 	add.w	r2, r7, #8
 800551e:	4610      	mov	r0, r2
 8005520:	4798      	blx	r3
 8005522:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005524:	e029      	b.n	800557a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f9f3 	bl	8005914 <USBD_CtlError>
        err++;
 800552e:	7afb      	ldrb	r3, [r7, #11]
 8005530:	3301      	adds	r3, #1
 8005532:	72fb      	strb	r3, [r7, #11]
      break;
 8005534:	e021      	b.n	800557a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	7c1b      	ldrb	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10d      	bne.n	800555a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005546:	f107 0208 	add.w	r2, r7, #8
 800554a:	4610      	mov	r0, r2
 800554c:	4798      	blx	r3
 800554e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3301      	adds	r3, #1
 8005554:	2207      	movs	r2, #7
 8005556:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005558:	e00f      	b.n	800557a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f9d9 	bl	8005914 <USBD_CtlError>
        err++;
 8005562:	7afb      	ldrb	r3, [r7, #11]
 8005564:	3301      	adds	r3, #1
 8005566:	72fb      	strb	r3, [r7, #11]
      break;
 8005568:	e007      	b.n	800557a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f9d1 	bl	8005914 <USBD_CtlError>
      err++;
 8005572:	7afb      	ldrb	r3, [r7, #11]
 8005574:	3301      	adds	r3, #1
 8005576:	72fb      	strb	r3, [r7, #11]
      break;
 8005578:	bf00      	nop
  }

  if (err != 0U)
 800557a:	7afb      	ldrb	r3, [r7, #11]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11c      	bne.n	80055ba <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005580:	893b      	ldrh	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d011      	beq.n	80055aa <USBD_GetDescriptor+0x2b6>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	88db      	ldrh	r3, [r3, #6]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00d      	beq.n	80055aa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	88da      	ldrh	r2, [r3, #6]
 8005592:	893b      	ldrh	r3, [r7, #8]
 8005594:	4293      	cmp	r3, r2
 8005596:	bf28      	it	cs
 8005598:	4613      	movcs	r3, r2
 800559a:	b29b      	uxth	r3, r3
 800559c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800559e:	893b      	ldrh	r3, [r7, #8]
 80055a0:	461a      	mov	r2, r3
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fa1f 	bl	80059e8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	88db      	ldrh	r3, [r3, #6]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d104      	bne.n	80055bc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fa76 	bl	8005aa4 <USBD_CtlSendStatus>
 80055b8:	e000      	b.n	80055bc <USBD_GetDescriptor+0x2c8>
    return;
 80055ba:	bf00      	nop
    }
  }
}
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop

080055c4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	889b      	ldrh	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d130      	bne.n	8005638 <USBD_SetAddress+0x74>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	88db      	ldrh	r3, [r3, #6]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d12c      	bne.n	8005638 <USBD_SetAddress+0x74>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	885b      	ldrh	r3, [r3, #2]
 80055e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80055e4:	d828      	bhi.n	8005638 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	885b      	ldrh	r3, [r3, #2]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d104      	bne.n	8005606 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f988 	bl	8005914 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005604:	e01d      	b.n	8005642 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	7bfa      	ldrb	r2, [r7, #15]
 800560a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fe55 	bl	80062c2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa43 	bl	8005aa4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800562c:	e009      	b.n	8005642 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005636:	e004      	b.n	8005642 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f96a 	bl	8005914 <USBD_CtlError>
  }
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	885b      	ldrh	r3, [r3, #2]
 800565a:	b2da      	uxtb	r2, r3
 800565c:	4b41      	ldr	r3, [pc, #260]	@ (8005764 <USBD_SetConfig+0x118>)
 800565e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005660:	4b40      	ldr	r3, [pc, #256]	@ (8005764 <USBD_SetConfig+0x118>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d904      	bls.n	8005672 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f952 	bl	8005914 <USBD_CtlError>
 8005670:	e075      	b.n	800575e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005678:	2b02      	cmp	r3, #2
 800567a:	d002      	beq.n	8005682 <USBD_SetConfig+0x36>
 800567c:	2b03      	cmp	r3, #3
 800567e:	d023      	beq.n	80056c8 <USBD_SetConfig+0x7c>
 8005680:	e062      	b.n	8005748 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005682:	4b38      	ldr	r3, [pc, #224]	@ (8005764 <USBD_SetConfig+0x118>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d01a      	beq.n	80056c0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800568a:	4b36      	ldr	r3, [pc, #216]	@ (8005764 <USBD_SetConfig+0x118>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2203      	movs	r2, #3
 8005698:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800569c:	4b31      	ldr	r3, [pc, #196]	@ (8005764 <USBD_SetConfig+0x118>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff f9e7 	bl	8004a76 <USBD_SetClassConfig>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d104      	bne.n	80056b8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f92f 	bl	8005914 <USBD_CtlError>
            return;
 80056b6:	e052      	b.n	800575e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f9f3 	bl	8005aa4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80056be:	e04e      	b.n	800575e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f9ef 	bl	8005aa4 <USBD_CtlSendStatus>
        break;
 80056c6:	e04a      	b.n	800575e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80056c8:	4b26      	ldr	r3, [pc, #152]	@ (8005764 <USBD_SetConfig+0x118>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d112      	bne.n	80056f6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80056d8:	4b22      	ldr	r3, [pc, #136]	@ (8005764 <USBD_SetConfig+0x118>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80056e2:	4b20      	ldr	r3, [pc, #128]	@ (8005764 <USBD_SetConfig+0x118>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff f9e3 	bl	8004ab4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f9d8 	bl	8005aa4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80056f4:	e033      	b.n	800575e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80056f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005764 <USBD_SetConfig+0x118>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d01d      	beq.n	8005740 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7ff f9d1 	bl	8004ab4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005712:	4b14      	ldr	r3, [pc, #80]	@ (8005764 <USBD_SetConfig+0x118>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800571c:	4b11      	ldr	r3, [pc, #68]	@ (8005764 <USBD_SetConfig+0x118>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff f9a7 	bl	8004a76 <USBD_SetClassConfig>
 8005728:	4603      	mov	r3, r0
 800572a:	2b02      	cmp	r3, #2
 800572c:	d104      	bne.n	8005738 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f8ef 	bl	8005914 <USBD_CtlError>
            return;
 8005736:	e012      	b.n	800575e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f9b3 	bl	8005aa4 <USBD_CtlSendStatus>
        break;
 800573e:	e00e      	b.n	800575e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f9af 	bl	8005aa4 <USBD_CtlSendStatus>
        break;
 8005746:	e00a      	b.n	800575e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005748:	6839      	ldr	r1, [r7, #0]
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f8e2 	bl	8005914 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005750:	4b04      	ldr	r3, [pc, #16]	@ (8005764 <USBD_SetConfig+0x118>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff f9ac 	bl	8004ab4 <USBD_ClrClassConfig>
        break;
 800575c:	bf00      	nop
    }
  }
}
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20000254 	.word	0x20000254

08005768 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	88db      	ldrh	r3, [r3, #6]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d004      	beq.n	8005784 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f8c9 	bl	8005914 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005782:	e022      	b.n	80057ca <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800578a:	2b02      	cmp	r3, #2
 800578c:	dc02      	bgt.n	8005794 <USBD_GetConfig+0x2c>
 800578e:	2b00      	cmp	r3, #0
 8005790:	dc03      	bgt.n	800579a <USBD_GetConfig+0x32>
 8005792:	e015      	b.n	80057c0 <USBD_GetConfig+0x58>
 8005794:	2b03      	cmp	r3, #3
 8005796:	d00b      	beq.n	80057b0 <USBD_GetConfig+0x48>
 8005798:	e012      	b.n	80057c0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3308      	adds	r3, #8
 80057a4:	2201      	movs	r2, #1
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f91d 	bl	80059e8 <USBD_CtlSendData>
        break;
 80057ae:	e00c      	b.n	80057ca <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3304      	adds	r3, #4
 80057b4:	2201      	movs	r2, #1
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f915 	bl	80059e8 <USBD_CtlSendData>
        break;
 80057be:	e004      	b.n	80057ca <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80057c0:	6839      	ldr	r1, [r7, #0]
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f8a6 	bl	8005914 <USBD_CtlError>
        break;
 80057c8:	bf00      	nop
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057e2:	3b01      	subs	r3, #1
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d81e      	bhi.n	8005826 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	88db      	ldrh	r3, [r3, #6]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d004      	beq.n	80057fa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f88e 	bl	8005914 <USBD_CtlError>
        break;
 80057f8:	e01a      	b.n	8005830 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f043 0202 	orr.w	r2, r3, #2
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	330c      	adds	r3, #12
 800581a:	2202      	movs	r2, #2
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f8e2 	bl	80059e8 <USBD_CtlSendData>
      break;
 8005824:	e004      	b.n	8005830 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005826:	6839      	ldr	r1, [r7, #0]
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f873 	bl	8005914 <USBD_CtlError>
      break;
 800582e:	bf00      	nop
  }
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	885b      	ldrh	r3, [r3, #2]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d106      	bne.n	8005858 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f926 	bl	8005aa4 <USBD_CtlSendStatus>
  }
}
 8005858:	bf00      	nop
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005870:	3b01      	subs	r3, #1
 8005872:	2b02      	cmp	r3, #2
 8005874:	d80b      	bhi.n	800588e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	885b      	ldrh	r3, [r3, #2]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d10c      	bne.n	8005898 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f90c 	bl	8005aa4 <USBD_CtlSendStatus>
      }
      break;
 800588c:	e004      	b.n	8005898 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800588e:	6839      	ldr	r1, [r7, #0]
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f83f 	bl	8005914 <USBD_CtlError>
      break;
 8005896:	e000      	b.n	800589a <USBD_ClrFeature+0x3a>
      break;
 8005898:	bf00      	nop
  }
}
 800589a:	bf00      	nop
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781a      	ldrb	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	785a      	ldrb	r2, [r3, #1]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	3302      	adds	r3, #2
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	3303      	adds	r3, #3
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	021b      	lsls	r3, r3, #8
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	4413      	add	r3, r2
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	3304      	adds	r3, #4
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	3305      	adds	r3, #5
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	4413      	add	r3, r2
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	3306      	adds	r3, #6
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	3307      	adds	r3, #7
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	b29b      	uxth	r3, r3
 8005902:	4413      	add	r3, r2
 8005904:	b29a      	uxth	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	80da      	strh	r2, [r3, #6]

}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr

08005914 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800591e:	2180      	movs	r1, #128	@ 0x80
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fc6b 	bl	80061fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005926:	2100      	movs	r1, #0
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fc67 	bl	80061fc <USBD_LL_StallEP>
}
 800592e:	bf00      	nop
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b086      	sub	sp, #24
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d032      	beq.n	80059b2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f834 	bl	80059ba <USBD_GetLen>
 8005952:	4603      	mov	r3, r0
 8005954:	3301      	adds	r3, #1
 8005956:	b29b      	uxth	r3, r3
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	75fa      	strb	r2, [r7, #23]
 8005966:	461a      	mov	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4413      	add	r3, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	7812      	ldrb	r2, [r2, #0]
 8005970:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	75fa      	strb	r2, [r7, #23]
 8005978:	461a      	mov	r2, r3
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4413      	add	r3, r2
 800597e:	2203      	movs	r2, #3
 8005980:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005982:	e012      	b.n	80059aa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	60fa      	str	r2, [r7, #12]
 800598a:	7dfa      	ldrb	r2, [r7, #23]
 800598c:	1c51      	adds	r1, r2, #1
 800598e:	75f9      	strb	r1, [r7, #23]
 8005990:	4611      	mov	r1, r2
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	440a      	add	r2, r1
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800599a:	7dfb      	ldrb	r3, [r7, #23]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	75fa      	strb	r2, [r7, #23]
 80059a0:	461a      	mov	r2, r3
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	4413      	add	r3, r2
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e8      	bne.n	8005984 <USBD_GetString+0x4e>
    }
  }
}
 80059b2:	bf00      	nop
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80059c6:	e005      	b.n	80059d4 <USBD_GetLen+0x1a>
  {
    len++;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	3301      	adds	r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3301      	adds	r3, #1
 80059d2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f5      	bne.n	80059c8 <USBD_GetLen+0xe>
  }

  return len;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	4613      	mov	r3, r2
 80059f4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2202      	movs	r2, #2
 80059fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80059fe:	88fa      	ldrh	r2, [r7, #6]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005a04:	88fa      	ldrh	r2, [r7, #6]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	2100      	movs	r1, #0
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fc75 	bl	8006300 <USBD_LL_Transmit>

  return USBD_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	2100      	movs	r1, #0
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fc63 	bl	8006300 <USBD_LL_Transmit>

  return USBD_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2203      	movs	r2, #3
 8005a56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005a62:	88fa      	ldrh	r2, [r7, #6]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	2100      	movs	r1, #0
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fc68 	bl	8006346 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	2100      	movs	r1, #0
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fc56 	bl	8006346 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2204      	movs	r2, #4
 8005ab0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2100      	movs	r1, #0
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fc20 	bl	8006300 <USBD_LL_Transmit>

  return USBD_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b082      	sub	sp, #8
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2205      	movs	r2, #5
 8005ad6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ada:	2300      	movs	r3, #0
 8005adc:	2200      	movs	r2, #0
 8005ade:	2100      	movs	r1, #0
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fc30 	bl	8006346 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005af4:	2200      	movs	r2, #0
 8005af6:	4912      	ldr	r1, [pc, #72]	@ (8005b40 <MX_USB_DEVICE_Init+0x50>)
 8005af8:	4812      	ldr	r0, [pc, #72]	@ (8005b44 <MX_USB_DEVICE_Init+0x54>)
 8005afa:	f7fe ff62 	bl	80049c2 <USBD_Init>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005b04:	f7fa ff32 	bl	800096c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005b08:	490f      	ldr	r1, [pc, #60]	@ (8005b48 <MX_USB_DEVICE_Init+0x58>)
 8005b0a:	480e      	ldr	r0, [pc, #56]	@ (8005b44 <MX_USB_DEVICE_Init+0x54>)
 8005b0c:	f7fe ff84 	bl	8004a18 <USBD_RegisterClass>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005b16:	f7fa ff29 	bl	800096c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005b1a:	490c      	ldr	r1, [pc, #48]	@ (8005b4c <MX_USB_DEVICE_Init+0x5c>)
 8005b1c:	4809      	ldr	r0, [pc, #36]	@ (8005b44 <MX_USB_DEVICE_Init+0x54>)
 8005b1e:	f7fe feb5 	bl	800488c <USBD_CDC_RegisterInterface>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005b28:	f7fa ff20 	bl	800096c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005b2c:	4805      	ldr	r0, [pc, #20]	@ (8005b44 <MX_USB_DEVICE_Init+0x54>)
 8005b2e:	f7fe ff8c 	bl	8004a4a <USBD_Start>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005b38:	f7fa ff18 	bl	800096c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005b3c:	bf00      	nop
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000144 	.word	0x20000144
 8005b44:	20000258 	.word	0x20000258
 8005b48:	20000030 	.word	0x20000030
 8005b4c:	20000134 	.word	0x20000134

08005b50 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005b54:	2200      	movs	r2, #0
 8005b56:	4905      	ldr	r1, [pc, #20]	@ (8005b6c <CDC_Init_FS+0x1c>)
 8005b58:	4805      	ldr	r0, [pc, #20]	@ (8005b70 <CDC_Init_FS+0x20>)
 8005b5a:	f7fe fead 	bl	80048b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005b5e:	4905      	ldr	r1, [pc, #20]	@ (8005b74 <CDC_Init_FS+0x24>)
 8005b60:	4803      	ldr	r0, [pc, #12]	@ (8005b70 <CDC_Init_FS+0x20>)
 8005b62:	f7fe fec2 	bl	80048ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005b66:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	2000091c 	.word	0x2000091c
 8005b70:	20000258 	.word	0x20000258
 8005b74:	2000051c 	.word	0x2000051c

08005b78 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005b7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr
	...

08005b88 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	6039      	str	r1, [r7, #0]
 8005b92:	71fb      	strb	r3, [r7, #7]
 8005b94:	4613      	mov	r3, r2
 8005b96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005b98:	79fb      	ldrb	r3, [r7, #7]
 8005b9a:	2b23      	cmp	r3, #35	@ 0x23
 8005b9c:	d84a      	bhi.n	8005c34 <CDC_Control_FS+0xac>
 8005b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba4 <CDC_Control_FS+0x1c>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005c35 	.word	0x08005c35
 8005ba8:	08005c35 	.word	0x08005c35
 8005bac:	08005c35 	.word	0x08005c35
 8005bb0:	08005c35 	.word	0x08005c35
 8005bb4:	08005c35 	.word	0x08005c35
 8005bb8:	08005c35 	.word	0x08005c35
 8005bbc:	08005c35 	.word	0x08005c35
 8005bc0:	08005c35 	.word	0x08005c35
 8005bc4:	08005c35 	.word	0x08005c35
 8005bc8:	08005c35 	.word	0x08005c35
 8005bcc:	08005c35 	.word	0x08005c35
 8005bd0:	08005c35 	.word	0x08005c35
 8005bd4:	08005c35 	.word	0x08005c35
 8005bd8:	08005c35 	.word	0x08005c35
 8005bdc:	08005c35 	.word	0x08005c35
 8005be0:	08005c35 	.word	0x08005c35
 8005be4:	08005c35 	.word	0x08005c35
 8005be8:	08005c35 	.word	0x08005c35
 8005bec:	08005c35 	.word	0x08005c35
 8005bf0:	08005c35 	.word	0x08005c35
 8005bf4:	08005c35 	.word	0x08005c35
 8005bf8:	08005c35 	.word	0x08005c35
 8005bfc:	08005c35 	.word	0x08005c35
 8005c00:	08005c35 	.word	0x08005c35
 8005c04:	08005c35 	.word	0x08005c35
 8005c08:	08005c35 	.word	0x08005c35
 8005c0c:	08005c35 	.word	0x08005c35
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c35 	.word	0x08005c35
 8005c18:	08005c35 	.word	0x08005c35
 8005c1c:	08005c35 	.word	0x08005c35
 8005c20:	08005c35 	.word	0x08005c35
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c35 	.word	0x08005c35
 8005c2c:	08005c35 	.word	0x08005c35
 8005c30:	08005c35 	.word	0x08005c35
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005c34:	bf00      	nop
  }

  return (USBD_OK);
 8005c36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop

08005c44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	4812      	ldr	r0, [pc, #72]	@ (8005c9c <CDC_Receive_FS+0x58>)
 8005c52:	f7fe fe4a 	bl	80048ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005c56:	4811      	ldr	r0, [pc, #68]	@ (8005c9c <CDC_Receive_FS+0x58>)
 8005c58:	f7fe fe89 	bl	800496e <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	73fb      	strb	r3, [r7, #15]
  if(len>64) {len=64;}
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	2b40      	cmp	r3, #64	@ 0x40
 8005c66:	d901      	bls.n	8005c6c <CDC_Receive_FS+0x28>
 8005c68:	2340      	movs	r3, #64	@ 0x40
 8005c6a:	73fb      	strb	r3, [r7, #15]
  memset(dataBuffer, '\0', 64);
 8005c6c:	2240      	movs	r2, #64	@ 0x40
 8005c6e:	2100      	movs	r1, #0
 8005c70:	480b      	ldr	r0, [pc, #44]	@ (8005ca0 <CDC_Receive_FS+0x5c>)
 8005c72:	f000 fc17 	bl	80064a4 <memset>
  memcpy(dataBuffer, Buf, len);
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	4808      	ldr	r0, [pc, #32]	@ (8005ca0 <CDC_Receive_FS+0x5c>)
 8005c7e:	f000 fc3d 	bl	80064fc <memcpy>
  newData=1;
 8005c82:	4b08      	ldr	r3, [pc, #32]	@ (8005ca4 <CDC_Receive_FS+0x60>)
 8005c84:	2201      	movs	r2, #1
 8005c86:	701a      	strb	r2, [r3, #0]
  memset(Buf, '\0', 32);
 8005c88:	2220      	movs	r2, #32
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fc09 	bl	80064a4 <memset>
  return (USBD_OK);
 8005c92:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20000258 	.word	0x20000258
 8005ca0:	2000020c 	.word	0x2000020c
 8005ca4:	2000024c 	.word	0x2000024c

08005ca8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf0 <CDC_Transmit_FS+0x48>)
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cbe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e00b      	b.n	8005ce6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005cce:	887b      	ldrh	r3, [r7, #2]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	4806      	ldr	r0, [pc, #24]	@ (8005cf0 <CDC_Transmit_FS+0x48>)
 8005cd6:	f7fe fdef 	bl	80048b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005cda:	4805      	ldr	r0, [pc, #20]	@ (8005cf0 <CDC_Transmit_FS+0x48>)
 8005cdc:	f7fe fe18 	bl	8004910 <USBD_CDC_TransmitPacket>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000258 	.word	0x20000258

08005cf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	6039      	str	r1, [r7, #0]
 8005cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2212      	movs	r2, #18
 8005d04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005d06:	4b03      	ldr	r3, [pc, #12]	@ (8005d14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000160 	.word	0x20000160

08005d18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	6039      	str	r1, [r7, #0]
 8005d22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2204      	movs	r2, #4
 8005d28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005d2a:	4b03      	ldr	r3, [pc, #12]	@ (8005d38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000174 	.word	0x20000174

08005d3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	6039      	str	r1, [r7, #0]
 8005d46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d105      	bne.n	8005d5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	4907      	ldr	r1, [pc, #28]	@ (8005d70 <USBD_FS_ProductStrDescriptor+0x34>)
 8005d52:	4808      	ldr	r0, [pc, #32]	@ (8005d74 <USBD_FS_ProductStrDescriptor+0x38>)
 8005d54:	f7ff fdef 	bl	8005936 <USBD_GetString>
 8005d58:	e004      	b.n	8005d64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	4904      	ldr	r1, [pc, #16]	@ (8005d70 <USBD_FS_ProductStrDescriptor+0x34>)
 8005d5e:	4805      	ldr	r0, [pc, #20]	@ (8005d74 <USBD_FS_ProductStrDescriptor+0x38>)
 8005d60:	f7ff fde9 	bl	8005936 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d64:	4b02      	ldr	r3, [pc, #8]	@ (8005d70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000d1c 	.word	0x20000d1c
 8005d74:	08006604 	.word	0x08006604

08005d78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	6039      	str	r1, [r7, #0]
 8005d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	4904      	ldr	r1, [pc, #16]	@ (8005d98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005d88:	4804      	ldr	r0, [pc, #16]	@ (8005d9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005d8a:	f7ff fdd4 	bl	8005936 <USBD_GetString>
  return USBD_StrDesc;
 8005d8e:	4b02      	ldr	r3, [pc, #8]	@ (8005d98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	20000d1c 	.word	0x20000d1c
 8005d9c:	0800661c 	.word	0x0800661c

08005da0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	6039      	str	r1, [r7, #0]
 8005daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	221a      	movs	r2, #26
 8005db0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005db2:	f000 f843 	bl	8005e3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005db6:	4b02      	ldr	r3, [pc, #8]	@ (8005dc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	20000178 	.word	0x20000178

08005dc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	6039      	str	r1, [r7, #0]
 8005dce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005dd0:	79fb      	ldrb	r3, [r7, #7]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d105      	bne.n	8005de2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	4907      	ldr	r1, [pc, #28]	@ (8005df8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005dda:	4808      	ldr	r0, [pc, #32]	@ (8005dfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8005ddc:	f7ff fdab 	bl	8005936 <USBD_GetString>
 8005de0:	e004      	b.n	8005dec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	4904      	ldr	r1, [pc, #16]	@ (8005df8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005de6:	4805      	ldr	r0, [pc, #20]	@ (8005dfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8005de8:	f7ff fda5 	bl	8005936 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005dec:	4b02      	ldr	r3, [pc, #8]	@ (8005df8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000d1c 	.word	0x20000d1c
 8005dfc:	08006630 	.word	0x08006630

08005e00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	6039      	str	r1, [r7, #0]
 8005e0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d105      	bne.n	8005e1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	4907      	ldr	r1, [pc, #28]	@ (8005e34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e16:	4808      	ldr	r0, [pc, #32]	@ (8005e38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e18:	f7ff fd8d 	bl	8005936 <USBD_GetString>
 8005e1c:	e004      	b.n	8005e28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	4904      	ldr	r1, [pc, #16]	@ (8005e34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e22:	4805      	ldr	r0, [pc, #20]	@ (8005e38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e24:	f7ff fd87 	bl	8005936 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e28:	4b02      	ldr	r3, [pc, #8]	@ (8005e34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000d1c 	.word	0x20000d1c
 8005e38:	0800663c 	.word	0x0800663c

08005e3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005e42:	4b0f      	ldr	r3, [pc, #60]	@ (8005e80 <Get_SerialNum+0x44>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005e48:	4b0e      	ldr	r3, [pc, #56]	@ (8005e84 <Get_SerialNum+0x48>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e88 <Get_SerialNum+0x4c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4413      	add	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005e62:	2208      	movs	r2, #8
 8005e64:	4909      	ldr	r1, [pc, #36]	@ (8005e8c <Get_SerialNum+0x50>)
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f814 	bl	8005e94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	4908      	ldr	r1, [pc, #32]	@ (8005e90 <Get_SerialNum+0x54>)
 8005e70:	68b8      	ldr	r0, [r7, #8]
 8005e72:	f000 f80f 	bl	8005e94 <IntToUnicode>
  }
}
 8005e76:	bf00      	nop
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	1ffff7e8 	.word	0x1ffff7e8
 8005e84:	1ffff7ec 	.word	0x1ffff7ec
 8005e88:	1ffff7f0 	.word	0x1ffff7f0
 8005e8c:	2000017a 	.word	0x2000017a
 8005e90:	2000018a 	.word	0x2000018a

08005e94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	75fb      	strb	r3, [r7, #23]
 8005eaa:	e027      	b.n	8005efc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	0f1b      	lsrs	r3, r3, #28
 8005eb0:	2b09      	cmp	r3, #9
 8005eb2:	d80b      	bhi.n	8005ecc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	0f1b      	lsrs	r3, r3, #28
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	440b      	add	r3, r1
 8005ec4:	3230      	adds	r2, #48	@ 0x30
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	e00a      	b.n	8005ee2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	0f1b      	lsrs	r3, r3, #28
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	440b      	add	r3, r1
 8005edc:	3237      	adds	r2, #55	@ 0x37
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	3301      	adds	r3, #1
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	75fb      	strb	r3, [r7, #23]
 8005efc:	7dfa      	ldrb	r2, [r7, #23]
 8005efe:	79fb      	ldrb	r3, [r7, #7]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d3d3      	bcc.n	8005eac <IntToUnicode+0x18>
  }
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bc80      	pop	{r7}
 8005f0e:	4770      	bx	lr

08005f10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8005f54 <HAL_PCD_MspInit+0x44>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d113      	bne.n	8005f4a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <HAL_PCD_MspInit+0x48>)
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	4a0c      	ldr	r2, [pc, #48]	@ (8005f58 <HAL_PCD_MspInit+0x48>)
 8005f28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f2c:	61d3      	str	r3, [r2, #28]
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f58 <HAL_PCD_MspInit+0x48>)
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	2014      	movs	r0, #20
 8005f40:	f7fa ff77 	bl	8000e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005f44:	2014      	movs	r0, #20
 8005f46:	f7fa ff90 	bl	8000e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40005c00 	.word	0x40005c00
 8005f58:	40021000 	.word	0x40021000

08005f5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f7fe fdb1 	bl	8004ada <USBD_LL_SetupStage>
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 0268 	ldr.w	r0, [r3, #616]	@ 0x268
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	015b      	lsls	r3, r3, #5
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	f7fe fde6 	bl	8004b74 <USBD_LL_DataOutStage>
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 0268 	ldr.w	r0, [r3, #616]	@ 0x268
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	015b      	lsls	r3, r3, #5
 8005fc8:	4413      	add	r3, r2
 8005fca:	333c      	adds	r3, #60	@ 0x3c
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f7fe fe40 	bl	8004c56 <USBD_LL_DataInStage>
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe ff50 	bl	8004e92 <USBD_LL_SOF>
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006002:	2301      	movs	r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d001      	beq.n	8006012 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800600e:	f7fa fcad 	bl	800096c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006018:	7bfa      	ldrb	r2, [r7, #15]
 800601a:	4611      	mov	r1, r2
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe ff00 	bl	8004e22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006028:	4618      	mov	r0, r3
 800602a:	f7fe feb9 	bl	8004da0 <USBD_LL_Reset>
}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe fefa 	bl	8004e40 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006054:	4b04      	ldr	r3, [pc, #16]	@ (8006068 <HAL_PCD_SuspendCallback+0x30>)
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	4a03      	ldr	r2, [pc, #12]	@ (8006068 <HAL_PCD_SuspendCallback+0x30>)
 800605a:	f043 0306 	orr.w	r3, r3, #6
 800605e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	e000ed00 	.word	0xe000ed00

0800606c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe fef4 	bl	8004e68 <USBD_LL_Resume>
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006090:	4a28      	ldr	r2, [pc, #160]	@ (8006134 <USBD_LL_Init+0xac>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
  pdev->pData = &hpcd_USB_FS;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a26      	ldr	r2, [pc, #152]	@ (8006134 <USBD_LL_Init+0xac>)
 800609c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80060a0:	4b24      	ldr	r3, [pc, #144]	@ (8006134 <USBD_LL_Init+0xac>)
 80060a2:	4a25      	ldr	r2, [pc, #148]	@ (8006138 <USBD_LL_Init+0xb0>)
 80060a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80060a6:	4b23      	ldr	r3, [pc, #140]	@ (8006134 <USBD_LL_Init+0xac>)
 80060a8:	2208      	movs	r2, #8
 80060aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80060ac:	4b21      	ldr	r3, [pc, #132]	@ (8006134 <USBD_LL_Init+0xac>)
 80060ae:	2202      	movs	r2, #2
 80060b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80060b2:	4b20      	ldr	r3, [pc, #128]	@ (8006134 <USBD_LL_Init+0xac>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80060b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006134 <USBD_LL_Init+0xac>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80060be:	4b1d      	ldr	r3, [pc, #116]	@ (8006134 <USBD_LL_Init+0xac>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80060c4:	481b      	ldr	r0, [pc, #108]	@ (8006134 <USBD_LL_Init+0xac>)
 80060c6:	f7fb fcb5 	bl	8001a34 <HAL_PCD_Init>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80060d0:	f7fa fc4c 	bl	800096c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80060da:	2318      	movs	r3, #24
 80060dc:	2200      	movs	r2, #0
 80060de:	2100      	movs	r1, #0
 80060e0:	f7fc fb4e 	bl	8002780 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80060ea:	2358      	movs	r3, #88	@ 0x58
 80060ec:	2200      	movs	r2, #0
 80060ee:	2180      	movs	r1, #128	@ 0x80
 80060f0:	f7fc fb46 	bl	8002780 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80060fa:	23c0      	movs	r3, #192	@ 0xc0
 80060fc:	2200      	movs	r2, #0
 80060fe:	2181      	movs	r1, #129	@ 0x81
 8006100:	f7fc fb3e 	bl	8002780 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800610a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800610e:	2200      	movs	r2, #0
 8006110:	2101      	movs	r1, #1
 8006112:	f7fc fb35 	bl	8002780 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800611c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006120:	2200      	movs	r2, #0
 8006122:	2182      	movs	r1, #130	@ 0x82
 8006124:	f7fc fb2c 	bl	8002780 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000f1c 	.word	0x20000f1c
 8006138:	40005c00 	.word	0x40005c00

0800613c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006152:	4618      	mov	r0, r3
 8006154:	f7fb fd4f 	bl	8001bf6 <HAL_PCD_Start>
 8006158:	4603      	mov	r3, r0
 800615a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 f948 	bl	80063f4 <USBD_Get_USB_Status>
 8006164:	4603      	mov	r3, r0
 8006166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006168:	7bbb      	ldrb	r3, [r7, #14]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	4608      	mov	r0, r1
 800617c:	4611      	mov	r1, r2
 800617e:	461a      	mov	r2, r3
 8006180:	4603      	mov	r3, r0
 8006182:	70fb      	strb	r3, [r7, #3]
 8006184:	460b      	mov	r3, r1
 8006186:	70bb      	strb	r3, [r7, #2]
 8006188:	4613      	mov	r3, r2
 800618a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800619a:	78bb      	ldrb	r3, [r7, #2]
 800619c:	883a      	ldrh	r2, [r7, #0]
 800619e:	78f9      	ldrb	r1, [r7, #3]
 80061a0:	f7fb fe82 	bl	8001ea8 <HAL_PCD_EP_Open>
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f922 	bl	80063f4 <USBD_Get_USB_Status>
 80061b0:	4603      	mov	r3, r0
 80061b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b084      	sub	sp, #16
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	460b      	mov	r3, r1
 80061c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80061d8:	78fa      	ldrb	r2, [r7, #3]
 80061da:	4611      	mov	r1, r2
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fb fec3 	bl	8001f68 <HAL_PCD_EP_Close>
 80061e2:	4603      	mov	r3, r0
 80061e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 f903 	bl	80063f4 <USBD_Get_USB_Status>
 80061ee:	4603      	mov	r3, r0
 80061f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006216:	78fa      	ldrb	r2, [r7, #3]
 8006218:	4611      	mov	r1, r2
 800621a:	4618      	mov	r0, r3
 800621c:	f7fb ff6d 	bl	80020fa <HAL_PCD_EP_SetStall>
 8006220:	4603      	mov	r3, r0
 8006222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f8e4 	bl	80063f4 <USBD_Get_USB_Status>
 800622c:	4603      	mov	r3, r0
 800622e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006230:	7bbb      	ldrb	r3, [r7, #14]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	4611      	mov	r1, r2
 8006258:	4618      	mov	r0, r3
 800625a:	f7fb ffa8 	bl	80021ae <HAL_PCD_EP_ClrStall>
 800625e:	4603      	mov	r3, r0
 8006260:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	4618      	mov	r0, r3
 8006266:	f000 f8c5 	bl	80063f4 <USBD_Get_USB_Status>
 800626a:	4603      	mov	r3, r0
 800626c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800626e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800628a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800628c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006290:	2b00      	cmp	r3, #0
 8006292:	da08      	bge.n	80062a6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	015b      	lsls	r3, r3, #5
 800629e:	4413      	add	r3, r2
 80062a0:	332a      	adds	r3, #42	@ 0x2a
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	e008      	b.n	80062b8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	015b      	lsls	r3, r3, #5
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 80062b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc80      	pop	{r7}
 80062c0:	4770      	bx	lr

080062c2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80062dc:	78fa      	ldrb	r2, [r7, #3]
 80062de:	4611      	mov	r1, r2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fb fdbc 	bl	8001e5e <HAL_PCD_SetAddress>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 f881 	bl	80063f4 <USBD_Get_USB_Status>
 80062f2:	4603      	mov	r3, r0
 80062f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	607a      	str	r2, [r7, #4]
 800630a:	461a      	mov	r2, r3
 800630c:	460b      	mov	r3, r1
 800630e:	72fb      	strb	r3, [r7, #11]
 8006310:	4613      	mov	r3, r2
 8006312:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006322:	893b      	ldrh	r3, [r7, #8]
 8006324:	7af9      	ldrb	r1, [r7, #11]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	f7fb feae 	bl	8002088 <HAL_PCD_EP_Transmit>
 800632c:	4603      	mov	r3, r0
 800632e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	4618      	mov	r0, r3
 8006334:	f000 f85e 	bl	80063f4 <USBD_Get_USB_Status>
 8006338:	4603      	mov	r3, r0
 800633a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800633c:	7dbb      	ldrb	r3, [r7, #22]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b086      	sub	sp, #24
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	461a      	mov	r2, r3
 8006352:	460b      	mov	r3, r1
 8006354:	72fb      	strb	r3, [r7, #11]
 8006356:	4613      	mov	r3, r2
 8006358:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006368:	893b      	ldrh	r3, [r7, #8]
 800636a:	7af9      	ldrb	r1, [r7, #11]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	f7fb fe3d 	bl	8001fec <HAL_PCD_EP_Receive>
 8006372:	4603      	mov	r3, r0
 8006374:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006376:	7dfb      	ldrb	r3, [r7, #23]
 8006378:	4618      	mov	r0, r3
 800637a:	f000 f83b 	bl	80063f4 <USBD_Get_USB_Status>
 800637e:	4603      	mov	r3, r0
 8006380:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006382:	7dbb      	ldrb	r3, [r7, #22]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800639e:	78fa      	ldrb	r2, [r7, #3]
 80063a0:	4611      	mov	r1, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fb fe5c 	bl	8002060 <HAL_PCD_EP_GetRxCount>
 80063a8:	4603      	mov	r3, r0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80063bc:	4b02      	ldr	r3, [pc, #8]	@ (80063c8 <USBD_static_malloc+0x14>)
}
 80063be:	4618      	mov	r0, r3
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr
 80063c8:	20001188 	.word	0x20001188

080063cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]

}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr

080063de <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	460b      	mov	r3, r1
 80063e8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr

080063f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	2b03      	cmp	r3, #3
 8006406:	d817      	bhi.n	8006438 <USBD_Get_USB_Status+0x44>
 8006408:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <USBD_Get_USB_Status+0x1c>)
 800640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640e:	bf00      	nop
 8006410:	08006421 	.word	0x08006421
 8006414:	08006427 	.word	0x08006427
 8006418:	0800642d 	.word	0x0800642d
 800641c:	08006433 	.word	0x08006433
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	73fb      	strb	r3, [r7, #15]
    break;
 8006424:	e00b      	b.n	800643e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006426:	2302      	movs	r3, #2
 8006428:	73fb      	strb	r3, [r7, #15]
    break;
 800642a:	e008      	b.n	800643e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
    break;
 8006430:	e005      	b.n	800643e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006432:	2302      	movs	r3, #2
 8006434:	73fb      	strb	r3, [r7, #15]
    break;
 8006436:	e002      	b.n	800643e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006438:	2302      	movs	r3, #2
 800643a:	73fb      	strb	r3, [r7, #15]
    break;
 800643c:	bf00      	nop
  }
  return usb_status;
 800643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop

0800644c <strrchr>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8006452:	4603      	mov	r3, r0
 8006454:	d10e      	bne.n	8006474 <strrchr+0x28>
 8006456:	4621      	mov	r1, r4
 8006458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800645c:	f000 b85c 	b.w	8006518 <strchr>
 8006460:	4605      	mov	r5, r0
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	4621      	mov	r1, r4
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f856 	bl	8006518 <strchr>
 800646c:	2800      	cmp	r0, #0
 800646e:	d1f7      	bne.n	8006460 <strrchr+0x14>
 8006470:	4628      	mov	r0, r5
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	2500      	movs	r5, #0
 8006476:	e7f5      	b.n	8006464 <strrchr+0x18>

08006478 <strstr>:
 8006478:	780a      	ldrb	r2, [r1, #0]
 800647a:	b570      	push	{r4, r5, r6, lr}
 800647c:	b96a      	cbnz	r2, 800649a <strstr+0x22>
 800647e:	bd70      	pop	{r4, r5, r6, pc}
 8006480:	429a      	cmp	r2, r3
 8006482:	d109      	bne.n	8006498 <strstr+0x20>
 8006484:	460c      	mov	r4, r1
 8006486:	4605      	mov	r5, r0
 8006488:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f6      	beq.n	800647e <strstr+0x6>
 8006490:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006494:	429e      	cmp	r6, r3
 8006496:	d0f7      	beq.n	8006488 <strstr+0x10>
 8006498:	3001      	adds	r0, #1
 800649a:	7803      	ldrb	r3, [r0, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1ef      	bne.n	8006480 <strstr+0x8>
 80064a0:	4618      	mov	r0, r3
 80064a2:	e7ec      	b.n	800647e <strstr+0x6>

080064a4 <memset>:
 80064a4:	4603      	mov	r3, r0
 80064a6:	4402      	add	r2, r0
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d100      	bne.n	80064ae <memset+0xa>
 80064ac:	4770      	bx	lr
 80064ae:	f803 1b01 	strb.w	r1, [r3], #1
 80064b2:	e7f9      	b.n	80064a8 <memset+0x4>

080064b4 <__libc_init_array>:
 80064b4:	b570      	push	{r4, r5, r6, lr}
 80064b6:	2600      	movs	r6, #0
 80064b8:	4d0c      	ldr	r5, [pc, #48]	@ (80064ec <__libc_init_array+0x38>)
 80064ba:	4c0d      	ldr	r4, [pc, #52]	@ (80064f0 <__libc_init_array+0x3c>)
 80064bc:	1b64      	subs	r4, r4, r5
 80064be:	10a4      	asrs	r4, r4, #2
 80064c0:	42a6      	cmp	r6, r4
 80064c2:	d109      	bne.n	80064d8 <__libc_init_array+0x24>
 80064c4:	f000 f836 	bl	8006534 <_init>
 80064c8:	2600      	movs	r6, #0
 80064ca:	4d0a      	ldr	r5, [pc, #40]	@ (80064f4 <__libc_init_array+0x40>)
 80064cc:	4c0a      	ldr	r4, [pc, #40]	@ (80064f8 <__libc_init_array+0x44>)
 80064ce:	1b64      	subs	r4, r4, r5
 80064d0:	10a4      	asrs	r4, r4, #2
 80064d2:	42a6      	cmp	r6, r4
 80064d4:	d105      	bne.n	80064e2 <__libc_init_array+0x2e>
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064dc:	4798      	blx	r3
 80064de:	3601      	adds	r6, #1
 80064e0:	e7ee      	b.n	80064c0 <__libc_init_array+0xc>
 80064e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e6:	4798      	blx	r3
 80064e8:	3601      	adds	r6, #1
 80064ea:	e7f2      	b.n	80064d2 <__libc_init_array+0x1e>
 80064ec:	0800666c 	.word	0x0800666c
 80064f0:	0800666c 	.word	0x0800666c
 80064f4:	0800666c 	.word	0x0800666c
 80064f8:	08006670 	.word	0x08006670

080064fc <memcpy>:
 80064fc:	440a      	add	r2, r1
 80064fe:	4291      	cmp	r1, r2
 8006500:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006504:	d100      	bne.n	8006508 <memcpy+0xc>
 8006506:	4770      	bx	lr
 8006508:	b510      	push	{r4, lr}
 800650a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650e:	4291      	cmp	r1, r2
 8006510:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006514:	d1f9      	bne.n	800650a <memcpy+0xe>
 8006516:	bd10      	pop	{r4, pc}

08006518 <strchr>:
 8006518:	4603      	mov	r3, r0
 800651a:	b2c9      	uxtb	r1, r1
 800651c:	4618      	mov	r0, r3
 800651e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006522:	b112      	cbz	r2, 800652a <strchr+0x12>
 8006524:	428a      	cmp	r2, r1
 8006526:	d1f9      	bne.n	800651c <strchr+0x4>
 8006528:	4770      	bx	lr
 800652a:	2900      	cmp	r1, #0
 800652c:	bf18      	it	ne
 800652e:	2000      	movne	r0, #0
 8006530:	4770      	bx	lr
	...

08006534 <_init>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	bf00      	nop
 8006538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653a:	bc08      	pop	{r3}
 800653c:	469e      	mov	lr, r3
 800653e:	4770      	bx	lr

08006540 <_fini>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr
